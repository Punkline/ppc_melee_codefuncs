
-==-

Memory Info Logger

log.mem.info   # print info about a query input
args: rArg     # - arg can be a memory region ID or an address
[Punkline]
<log.mem.info> NTSC 1.02
.include "melee"; punkpc; melee mem
prolog rData, rString, rArg, rID, rMem, rMeta, rFSize, rASize, rReturns, cr, +0x20, xReturns
data.start
  0:  .asciz " MemDesc[%x] -- TYPE: %s %s   DESC: %8x   START: %8x   TOTAL: %\x23\ 8x bytes"
  1:  .asciz " HEAP"
  2:  .asciz "CACHE"
  3:  .asciz "Free     "
  4:  .asciz "Allocated"
  5:  .asciz "   %s   FRAGS: %\x23\ 8x   BIGGEST: %8x (%\x23\ 8x bytes)  TOTAL: %\x23\ 8x bytes"
  6:  .asciz "DRAM"
  7:  .asciz "SRAM"
  8:  .asciz " MemDesc[%x] -- NOT ACTIVE"
  9:  .asciz " MemDesc[%x] -- %s : %8x   START: %8x   SIZE: %\x23 10x   OFFSET: %\x23 10x   QUERY: %8x"
  10: .asciz " Static %5s -- START: %8x   QUERY: %8x   OFFSET: %\x23 10x"
  11: .asciz " (%8x is not a valid query; use a DRAM/SRAM address or a MemDesc ID 0...5)"
  align 2
  data.struct 0, "data.", xID, xHeap, xCache, xFree, xAlloc, xLine, xDRAM, xSRAM, xNotActive, xAddr, xStatic, xBad

data.end rData
mr rArg, r3
bl <mem.info>
cmpwi cr2, rArg, 0
mr. rMem, mem.info.rMem
mr rID, mem.info.rID
bge- cr2, _handle_ID

  _handle_addr:
  bt+ mem.info.bInRegion, _mem_addr
    cmpwi cr3, mem.info.rStatic, 0
    blt cr3, _static_addr

      _bad_addr:
      addi r3, rData, data.xBad
      mr r4, rArg
      b _final_print
      # print invalid query message if no information is returned from mem.info

      _static_addr:
      mr r5, mem.info.rStatic
      mr r4, mem.info.rString
      addi r3, rData, data.xStatic
      mr r6, rArg
      sub r7, r6, r5
      b _final_print
      # print static address info if query address couldn't be found in a managed memory region

      _mem_addr:
      sub r9, rArg, mem.info.rStart
      #mr r6, mem.info.rCache # -- already in place
      addi r5, rData, data.xCache
      bf+ mem.info.bIsHeap, 0f
        addi r5, rData, data.xHeap
        mr r6, mem.info.rHeap

      0:
      mr r7, mem.info.rStart
      mr r8, mem.info.rSize
      addi r3, rData, data.xAddr
      mr r4, rID
      mr r10, rArg
      b _final_print
      # print allocation/fragment information if

_handle_ID:
blt+ _memdesc_ID

  _inactive_ID:
  cmpwi rID, 5
  bgt- _bad_addr
  mr r4, rID
  addi r3, rData, data.xNotActive
  b _final_print
  # print about inactive region if ID is given but memdesc isn't found


  _memdesc_ID:
  regs (mem.info.rFCount), +1, rFCount, rFBig, rFTotal, rACount, rABig, rATotal
  # create aliases in this namespace for some mem.info.* returns

  cmpwi cr2, rFBig, 0
  cmpwi cr3, rABig, 0
  mr rFSize, rFBig
  mr rASize, rABig
  addi rReturns, sp, sp.xReturns
  stswi rFCount, rReturns, 6<<2
  # temporarily store finalized info about free and allocated fragments
  bt- mem.info.bIsHeap, _heap_ID

    _cache_ID:
    addi rString, rData, data.xCache
    bge- cr3, 0f; lwz rASize, CacheMeta.xSize(rABig); 0:
    b _print_ID

    _heap_ID:
    addi rString, rData, data.xHeap
    bge- cr2, 0f; lwz rFSize, HeapMeta.xSize(rFBig); 0:
    bge- cr3, 0f; lwz rASize, HeapMeta.xSize(rABig); 0:

  _print_ID:
  mr r7, mem.info.rMem
  lwz r8, MemDesc.xStart(r7)
  lwz r9, MemDesc.xSize(r7)
  addi r5, rData, data.xSRAM
  bf+ mem.info.bIsARAM, 0f; addi r5, rData, data.xDRAM; 0:
  mr r6, rString
  mr r4, rID
  addi r3, rData, data.xID
  bl <log.print>
  addi r3, rData, data.xLine
  addi r4, rData, data.xFree
  lswi r5, rReturns, 3<<2
  mr r8, r7
  mr r7, rFSize
  bl <log.print>
  addi r3, rData, data.xLine
  addi rReturns, rReturns, 3<<2
  addi r4, rData, data.xAlloc
  lswi r5, rReturns, 3<<2
  mr r8, r7
  mr r7, rASize

  _final_print:
  bl <log.print>
  bl <log.nl>

_return:
epilog
blr
