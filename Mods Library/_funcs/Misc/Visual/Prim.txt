-==-

Primitive Drawing Module
2.0 -- Standalone Version


prim.new -- Start drawing vertices using argument params
# --- args:
# r3 = number of verts to draw
# r4 = rParamsH:
prim.mCullMode = 0xC0000000
prim.mNoColor  = 0x20000000
prim.mAlphaBuf = 0x10000000
prim.mLineSize = 0x0FFF0000
prim.mZCompLoc = 0x00002000
prim.mZCompare = 0x00001000
prim.mZBuffer  = 0x00000800
prim.mZLogic   = 0x00000700
prim.mCIndexed = 0x00000080 # rCIBase (from r6)  color
prim.mCIndex16 = 0x00000040
prim.mPIndexed = 0x00000020 # rPIBase (from r7)  position
prim.mPIndex16 = 0x00000010
prim.mIRecache = 0x00000008
prim.mPrimType = 0x00000007

# r5 = rParamsL:
prim.mFixPoint = 0xFF000000
prim.mOtherMTX = 0x00800000 # rMTX    (from r8)
prim.mOneColor = 0x00400000 # rColor  (from r9)
prim.mNoZCoord = 0x00200000
prim.mNoAChan  = 0x00100000
prim.mRGBComp  = 0x00080000
prim.mRGBType  = 0x00070000
prim.mBMode    = 0x00003000
prim.mBMSource = 0x00000700
prim.mBMDest   = 0x00000070
prim.mBMLogic  = 0x0000000F

# masks for separating fixed point params from parent mask:
prim.mFixPoint_Enable = 0x80
prim.mFixPoint_Type   = 0x60
prim.mFixPoint_Frac   = 0x1F

# --- optional args:
# r6 = rCIBase -- Color Index Base Address (array of colors)
# r7 = rPIBase -- Position Index Base Address (array of positions)
# r8 = rMtx    -- Model view matrix to draw with (override CObj)
# r9 = rColor  -- A sole color, for all verts

# --- returns:
# r3 = GX FIFO pipe hardware address
# - use this to write vertex data by storing to 0x0(r3)


prim.close -- stop drawing verts, and invalidate the current params
# no args


prim.set -- prepare to begin drawing by setting params from an input data pointer
# --- args:
# r3 = number of verts (to default to)
#      - the default vert count is only invoked when -1 is given
# r4 = rParamsH
# r5 = rParamsL
# r6 = rCIBase -- Color Index Base Address (array of colors)
# r7 = rPIBase -- Position Index Base Address (array of positions)
# r8 = rMtx    -- Model view matrix to draw with (override CObj)
# r9 = rColor  -- A sole color, for all verts

# --- alternative args:
# r3 = address of params array:
prim.xParamsH = 0x00  # --- required
prim.xParamsL = 0x04  # --- required
prim.xCIBase  = 0x08  # - optional: prim.mCIndexed
prim.xPIBase  = 0x0C  # - optional: prim.mPIndexed
prim.xMtx     = 0x10  # - optional: prim.mOtherMTX
prim.xColor   = 0x14  # - optional: prim.mOneColor
# - this syntax variation does not alter the default vert count

prim.start -- commit to begin drawing from set params
# --- args:
# r3 = number of verts
# --- returns:
# r3 = GX FIFO pipe (hardware address for storing vertex data)

prim.quads -- alternatives to prim.start
prim.triangles
prim.trianglestrip
prim.trianglefan
prim.lines
prim.linestrip
prim.points
# --- args:
# r3 = number of verts
# - use any of these to force the stated primitive type
# --- returns:
# r3 = GX FIFO pipe (hardware address for storing vertex data)


prim.lines_width
prim.linestrip_width
prim.points_width
# --- args:
# r3 = number of verts
# r4 = line/point width
# - use any of these to force the stated line/point width
# --- returns:
# r3 = GX FIFO pipe (hardware address for storing vertex data)


---

64-bit Mask (ParamsH, ParamsL) Details:

# prim.mCullMode
# +C0000000  00000000 = Cull Mode
#  +8 = cull backface
#  +4 = cull frontface

# prim.mNoColor
# +20000000  00000000 = Disable Color buffer Update
#  false = allow colors
#  true  = disable updates to the color buffer with this polygon
#  - logic is inverted for this syntax to preserve backwards compatibility with older versions

# prim.mAlphaBuf
# +10000000  00000000 = Alpha buffer Update
#  false = skip
#  true  = enable updates to the alpha buffer with this polygon

# prim.mLineSize
# +0FFF0000  00000000 = Line Width/Point Size
#  n = 1/16 native pixel increments

# prim.mZCompLoc
# +00002000  00000000 = Z Compare Location
#  false = z buffer compares after texturing (slower, handles alpha correctly for textures)
#  true  = z buffer compares before texturing (faster, may cause issues for textures)

# prim.mZCompare
# +00001000  00000000 = Z Buffer Compare
#  false = z buffer is ignored by this polygon
#  true  = z buffer enables compare

# prim.mZBuffer
# +00000800  00000000 = Z Buffer Update
#  false = z buffer is unchanged by this polygon
#  true  = z buffer enables update

# prim.mZLogic
# +00000700  00000000 = Z Buffer Comparison Logic
#  +4 = greater than
#  +2 = equal to
#  +1 = less than

# prim.mCIndexed
# +00000080  00000000 = Set Indexed Colors (from r6)
#  false = r6 is ignored; colors are input with the vertex directly from gx fifo
#  true  = r6 specifies the base of an array of vertex colors
#  - inidexed colors are fed to GX using an ID instead of an actual color

# prim.mCIndex16
# +00000040  00000000 = Indexed Colors are 16-bit
#  false = Color IDs are bytes
#  true  = Color IDs are hwords

# prim.mPIndexed
# +00000020  00000000 = Set Indexed Position Coords (from r7)
#  false = position coordinates are input with the vertex directly from fifo
#  true  = r7 specifies the base of an array of vertex position coordinates
#  - indexed positions are fed to GX using an ID instead of an actual set of coordinates

# prim.mPIndex16
# +00000010  00000000 = Indexed Position Coords are 16-bit
#  false = Position IDs are bytes
#  true  = Position IDs are hwords

# prim.mIRecache
# +00000008  00000000 = Indexed Data needs re-cache
#  false = read-only vertex data is read without the need for flushing and waiting for ppcsync
#  true  = flushes DC at array regions to prevent incoherence between CPU and GPU cache
#  - only required for indexed variables -- GPU can't read pending I/O from the CPU outside of fifo

# prim.mPrimType
# +00000007  00000000 = Primitive Type
#  0 = quads
#  1 = --
#  2 = triangles
#  3 = trianglestrip
#  4 = trianglefan
#  5 = lines
#  6 = linestrip
#  7 = points

# prim.mFixPoint
# +00000000  FF000000 = Use Fixed Points for Position Input
#  +80 = enable fixed points (small integer data type with a fractional mantissa)
#  +40 = use 16-bit integers instead of 8-bit integers (includes mantissa)
#  +20 = use signed integers instead of unsigned integers
#  +1F = mantissa bit size (abstract; can be larger than actual bit size)

# prim.mOtherMTX
# +00000000  00800000 = Use Custom MTX (input in r8)
# false = use current CObj mtx
# true  = interpret r8 as either a CObj, a JObj, or a MTX

# prim.mOneColor
# +00000000  00400000 = Use Constant Color (input in r9)
# false = r9 is ignored; colors are read for each individual vertex
# true  = r9 specifies a color to use for all vertices in this polygon

# prim.mNoZCoord
# +00000000  00200000 = Omit Z coord in Position input
#  false = XYZ are read as part of input position coordinates
#  true  = only XY are read as part of input coordinates

# prim.mNoAChan
# +00000000  00100000 = Omit Alpha channel in Color input
#  false = input color includes an alpha channel
#  true  = input color does not have an alpha channel

# prim.mRGBComp
# +00000000 00080000 = Enable Compressed Color Data Format (bool)
#  false = default to uncompressed RGBA
#  true  = use `mRGBType` to specify a custom format type

# prim.mRGBType
# +00000000  00070000 = Color Data Format
#  0 = RGB565  (16-bit) compressed RGB
#  1 = RGB8    (24-bit) Full RGB (no padding)
#  2 = RGBX8   (32-bit) Full RGB aligned for RGBA
#  3 = RGBA4   (16-bit) very compressed RGBA
#  4 = RGBA6   (24-bit) compressed RGBA
#  5 = RGBA8   (32-bit) Full RGBA

# prim.mBMode
# +00000000  00003000 = Blend Type
#  0 = None
#  1 = Blend -- blend using blending equation
#  2 = Logic -- blend using bitwise operation
#  3 = Subtract -- input subtracts from existing pixel

# prim.mBMSource
# +00000000  00000700 = Blend Source (TEV+Fog)
#  0 = zero -- 0.0
#  1 = one  -- 1.0
#  2 = source color
#  3 = inverted source color
#  4 = source alpha
#  5 = inverted source alpha
#  6 = destination alpha
#  7 = inverted destination alpha

# prim.mBMDest
# +00000000  00000070 = Blend Dest (Environmental Frame Buffer)
#  0 = zero -- 0.0
#  1 = one  -- 1.0
#  2 = source color
#  3 = inverted source color
#  4 = source alpha
#  5 = inverted source alpha
#  6 = destination alpha
#  7 = inverted destination alpha

# prim.mBMLogic
# +00000000  0000000F = Blend Logic
#  0 -- CLEAR;   dst = 0
#  1 -- AND;     dst = src & dst
#  2 -- REVAND;  dst = src & ~dst
#  3 -- COPY;    dst = src
#  4 -- INVAND;  dst = ~src & dst
#  5 -- NOOP;    dst = dst
#  6 -- XOR;     dst = src ^ dst
#  7 -- OR;      dst = src | dst
#  8 -- NOR;     dst = ~(src | dst)
#  9 -- EQUIV;   dst = ~(src ^ dst)
#  A -- INV;     dst = ~dst
#  B -- REVOR;   dst = src | ~dst
#  C -- INVCOPY; dst = ~src
#  D -- INVOR;   dst = ~src | dst
#  E -- NAND;    dst = ~(src & dst)
#  F -- SET;     dst = 1
[Punkline]
<prim.close> NTSC 1.02
# Close the current set of drawing params
li r3, -1
b 0x80361fc4



<prim.new> NTSC 1.02

.include "melee"; melee

prolog
  bl <prim.set>
  li r3, -1
  bl <prim.start>
epilog
blr


<prim.start> NTSC 1.02
# Start drawing verts using current params
li r4, -1
li r5, -1
b <prim.__start>

<prim.quads> NTSC 1.02
# Variations allow override of primitive type
li r4, 0
b <prim.__start>
<prim.triangles> NTSC 1.02
li r4, 2
b <prim.__start>
<prim.trianglestrip> NTSC 1.02
li r4, 3
b <prim.__start>
<prim.trianglefan> NTSC 1.02
li r4, 4
b <prim.__start>
<prim.lines> NTSC 1.02
li r4, 5
li r5, -1
b <prim.__start>
<prim.linestrip> NTSC 1.02
li r4, 6
li r5, -1
b <prim.__start>
<prim.points> NTSC 1.02
li r4, 7
li r5, -1
b <prim.__start>

<prim.lines_width> NTSC 1.02
# Variations include a line/point width/size argument
mr r5, r4
li r4, 5
b <prim.__start>
<prim.linestrip_width> NTSC 1.02
mr r5, r4
li r4, 6
b <prim.__start>
<prim.points_width> NTSC 1.02
mr r5, r4
li r4, 7
b <prim.__start>

<prim.__start> NTSC 1.02
# r3 = number of verts
# r4 = primitive type
# r5 = width argument (for line or point primitive types)
.include "melee"; melee
prolog rParams, rVerts, rType
  lis r31, <<prim.__set_memory>>@h
  ori r31, r31, <<prim.__set_memory>>@l
  # rParams = r31

  mr. rVerts, r3
  bge+ 0f
    lwz rVerts, prim.xVerts(rParams)
    # sample old xVerts if negative is given

  0:
  mr. rType, r4
  stw rVerts, prim.xVerts(rParams)
  # update xVerts

  lwz r0, prim.xParamsH(rParams)
  bge+ 0f
    rlwinm rType, r0, prim.mPrimType
    # sample set primitive type if negative is given

  0:
  cmpwi rType, (GX_LINES-0x80)>>3
  blt+ 0f
    mr. r3, r5
    bge+ 1f
      rlwinm r3, r0, prim.mLineSize
      # sample set line size if negative is given

    1:
    cmpwi rType, (GX_POINTS-0x80)>>3
    beq+ 1f
      bl <GX.setPointSize>
      b 0f

    1:
    bl <GX.setLineWidth>
    # line/point width has been set, if using lines or points

  0:
  rlwinm r3, rType, 3, 0x7<<3
  li r4, 0
  addi r3, r3, 0x80
  mr r5, rVerts
  bl <GX.begin>

_return:
lis r3, 0xCC01
subi r3, r3, 0x8000
epilog
blr







<prim.__set_memory> NTSC 1.02
# This is static memory reserved for storing the last used draw settings
00101303 00001455                    # 0x00 : Params memory
00000000 00000000 00000000 00000000  # 0x08 : Option arg memory
00000000                             # 0x18 : Vert count memory
00101303 00001455                    # 0x1C : Default params

<prim.reset_mem> NTSC 1.02
# Reset params memory to default values
lis r3, <<prim.__set_memory>>@h
ori r3, r3, <<prim.__set_memory>>@l
lwz r0, 0x1C(r3)
stw r0, 0x0(r3)
lwz r0, 0x20(r3)
stw r0, 0x4(r3)
li r0, 0
stw r0, 0x08(r3)
stw r0, 0x0C(r3)
stw r0, 0x10(r3)
stw r0, 0x14(r3)
stw r0, 0x18(r3)
beqlr
li r3, -1
b <prim.set>


<prim.set> NTSC 1.02
# Set GX params for next draw (without committing to draw)
# r3 = list of params
# Params:
#   0x0  = 64bit (rParamsH, rParamsL)
#   0x8  = Optional Color Index Pointer
#   0xC  = Optional Polygon Index Pointer
#   0x10 = Optional Camera Mtx Pointer
#   0x14 = Optional Single Color RGBA

# Alternative syntax:
# r3 = vert count
# r4...r9 = params

# Alternative syntax:
# r3 = -1 (use previous params)
#   - if no params have been used yet, then default params are used

.include "melee"; melee
prolog rColor, rMtx, rPIBase, rCIBase, rParamsL, rParamsH, rParams, rFixed, rSaved, rCStride, rPStride, rMem, cr, +0x20, xSaved

  cmpwi cr1, r3, -1
  mr. rParams, r3
  addi rSaved, sp, sp.xSaved
  crandc cr0.lt, cr0.lt, cr1.eq
  lis r20, <<prim.__set_memory>>@h
  ori r20, r20, <<prim.__set_memory>>@l
  # rMem = r20

  blt- 0f
    mr rParams, rMem
    stw r3, prim.xVerts(rParams)
    stswi r4, rParams, 0x18
    # store args if a non-address is given in r3

  0:

  lmw rParamsH, 0(rParams)
  stmw rParamsH, 0(rMem)
  # update memorized params with the current params

  rlwinm r0, rParamsH, prim.mNoColor
  xori r3, r0, 1
  #  - logic is inverted for this syntax to preserve backwards compatibility with older versions

  # load r3, GX_TRUE
  bl <GX.setColorUpdate>
  rlwinm r3, rParamsH, prim.mAlphaBuf

  # load r3, GX_FALSE
  bl <GX.setAlphaUpdate>

  rlwinm r3, rParamsL, prim.mBMode
  rlwinm r4, rParamsL, prim.mBMSource
  rlwinm r5, rParamsL, prim.mBMDest
  rlwinm r6, rParamsL, prim.mBMLogic

  # load r3, GX_BM_BLEND, GX_BL_SRCALPHA, GX_BL_INVSRCALPHA, GX_LO_NOOP
  bl <GX.setBlendMode>

  load r3, GX_GREATER, 0, GX_AOP_AND, GX_GREATER, 0
  bl <GX.setAlphaCompare>

  rlwinm r3, rParamsH, prim.mZCompare
  rlwinm r4, rParamsH, prim.mZLogic
  rlwinm r5, rParamsH, prim.mZBuffer
  # load r3, GX_TRUE, GX_LEQUAL, GX_FALSE
  bl <GX.setZMode>

  rlwinm r3, rParamsH, prim.mZCompLoc
  # load r3, GX_FALSE
  bl <GX.setZCompLoc>

  load r3, 0
  bl <GX.setNumTexGens>
  load r3, 1
  bl <GX.setNumTevStages>
  load r3, GX_TEVSTAGE0, GX_TEXCOORDNULL, GX_TEXMAP_NULL, GX_COLOR0A0
  bl <GX.setTevOrder>
  load r3, GX_TEVSTAGE0, GX_PASSCLR
  bl <GX.setTevOp>
  load r3, 1
  bl <GX.setNumChans>
  # - these might be more customizable in a later version
  #   - you may override these defaults by using <prim.set> followed by addendums

  rlwinm. r0, rParamsL, prim.mOneColor
  beq+ 0f
    li r3, 1
    addi r4, rParams, prim.xColor
    bl <GX.setMatColor>
  0:

  load r3, GX_COLOR0A0, GX_FALSE, 0, 1, GX_LIGHTNULL, GX_DF_NONE, GX_AF_NONE
  bl <GX.setChanCtrl>

  rlwinm r3, rParamsH, prim.mCullMode
  # load r3, GX_CULL_NONE
  bl <GX.setCullMode>

  bl <GX.clearVtxDesc>
  rlwinm rFixed, rParamsL, prim.mFixPoint
  li r3, GX_VTXFMT0
  rlwinm. r0, rFixed, prim.mFixPoint_Enable
  li r6, GX_F32
  li r7, 0
  li rPStride, 4
  li r4, GX_VA_POS
  beq+ 0f
    rlwinm r6, rFixed, prim.mFixPoint_Type
    li r0, 1
    rlwinm r7, rFixed, prim.mFixPoint_Frac
    slw rPStride, r0, r6
    # use custom fixed point data type, if flagged

  0:
  rlwinm. r5, rParamsL, prim.mNoZCoord
  slwi r0, rPStride, 1
  xori r5, r5, 1
  beq+ 0f
    mulli r0, rPStride, 3
  0:
  mr rPStride, r0
  # load r3, GX_VTXFMT0, GX_VA_POS, GX_POS_XYZ, GX_F32, 0
  bl <GX.setVtxAttrFmt>  # pos def

  rlwinm. r0, rParamsL, prim.mRGBComp
  load r3, GX_VTXFMT0, GX_VA_COLOR0
  rlwinm r0, rParamsL, prim.mNoAChan
  load r6, GX_RGBA8, 0
  xori r5, r0, 1
  li rCStride, 0
  beq+ 0f
    rlwinm r6, rParamsL, prim.mRGBType
    srwi rCStride, r6, 1
    addi rCStride, rCStride, 2
  0:
  xori r5, r0, 1
  # load r3, GX_VTXFMT0, GX_COLOR0, GX_CLR_RGBA, 5, GX_RGBA8
  bl <GX.setVtxAttrFmt>  # color def

  rlwinm. r0, rParamsH, prim.mPIndexed
  load r3, GX_VA_POS, GX_DIRECT
  stswi r3, rSaved, 0x8
  beq+ 0f
    li r4, GX_INDEX8
    rlwinm. r0, rParamsH, prim.mPIndex16
    beq+ 1f
      li r4, GX_INDEX16
    1:
    stw r4, 0x4(rSaved)
    mr. r3, rPIBase
    bge- 1f
      rlwinm. r0, rParamsH, prim.mIRecache
      beq+ 2f
        subi r0, r4, 1            # 1 = 8bit; 2 = 16bit
        slwi r4, r0, 3            # 8 = 8bit; 16 = 16bit
        li r0, 1
        slw r4, r0, r4            # 0x100 = 8bit; 0x10000 = 16bit
        mullw r4, rPStride, r4    # *= stride == data flush size
        bl <data.flush_DC>        # data is now safe for GPU to recache
      2:
      li r3, GX_VA_POS
      mr r4, rPIBase
      mr r5, rPStride
      bl <GX.setArray>
    1:
  0:
  lswi r3, rSaved, 0x8
  bl <GX.setVtxDesc>

  rlwinm. r0, rParamsH, prim.mCIndexed
  load r3, GX_VA_COLOR0, GX_DIRECT
  stswi r3, rSaved, 0x8
  beq+ 0f
    li r4, GX_INDEX8
    rlwinm. r0, rParamsH, prim.mCIndex16
    beq+ 1f
      li r4, GX_INDEX16
    1:
    stw r4, 0x4(rSaved)
    mr. r3, rCIBase
    bge- 1f
      rlwinm. r0, rParamsH, prim.mIRecache
      beq+ 2f
        subi r0, r4, 1            # 1 = 8bit; 2 = 16bit
        slwi r4, r0, 3            # 8 = 8bit; 16 = 16bit
        li r0, 1
        slw r4, r0, r4            # 0x100 = 8bit; 0x10000 = 16bit
        mullw r4, rCStride, r4    # *= stride == data flush size
        bl <data.flush_DC>        # data is now safe for GPU to recache
      2:
      li r3, GX_VA_COLOR0
      mr r4, rCIBase
      mr r5, rCStride
      bl <GX.setArray>
    1:
  0:
  lswi r3, rSaved, 0x8
  bl <GX.setVtxDesc>


  rlwinm. r0, rParamsL, prim.mOtherMTX
  mr r3, rMtx
  bne- 0f

    bl <CObj.getCurrent>
    addi r3, r3, 0x54
  0:
  li r4, 0
  bl <GX.loadPosMtxImm>
  load r3, 0
  bl <GX.setCurrentMtx>


epilog
blr
