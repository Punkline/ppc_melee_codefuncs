Dolphin Logger Functions


[Punkline]
# --- generic tools:

<log.printf> NTSC 1.02
# This logs a formatted print message in the Dolphin logger
# - log messages will flood EXI buffer with ascii, obfuscating some error outputs in the game

# --- args:
# r3 = address of format string
# - string MUST begin with a space
# - string may include escapes for inserting formatted arguments:
#   - GPR escapes:  %s = str,  %x = hex,  %d, %i = signed decimal,  %u = unsigned decimal
# r4...r10 = GPR arguments
# - these will be fed into the escapes found in the format string, as needed

crandc 6, 6, 6  # disables FPR args
b 0x80323eb4   # printf

<log.printff> NTSC 1.02
# This logs a formatted print message in the Dolphin logger, and can use floating point args
# - log messages will flood EXI buffer with ascii, obfuscating some error outputs in the game

# --- args:
# r3 = address of format string
# - string MUST begin with a space, and may include escapes for inserting formatted arguments
#   - GPR escapes:  %s = str,  %x = hex,  %d, %i = signed decimal,  %u = unsigned decimal
#   - FPR escapes:  %f = float,  %e = exponent
# r4...r10 = GPR arguments
# f1...f8  = FPR arguments
# - these will be fed into the escapes found in the format string, as needed

crorc 6, 6, 6  # enables FPR args
b 0x80323eb4   # printf



<log.printf_nl>
# Prints a null message to give the appearence of a newline without emitting one
mflr r0
stwu sp, -0x20(sp)
stw  r0,  0x20+4(sp)
li r0, 0
stw r0, 0x10(sp)
addi r3, sp, 0x10
bl <log.printf>
lwz  r0,  0x20+4(sp)
addi sp, sp, 0x20
mtlr r0
blr



<log.timestamp> NTSC 1.02
# takes no args, and returns the following identifying timestamp data:
# --- Retrns:
# f1 = Scene frame
#    - integer index counter -- not a real timer
#      - index counts up once before the GProc, GXDraw steps in a scene frame execute
#      - updated as part of the HSD Performance stat routine implemented in the scene loop
# f2 = Relative frame
#    - using HSD Performance stat timestamps
#      - f2 is the real time relative to the start of the counted frame in f1
#      - very accurate -- should maintain precision of 20-nanosecond increments
# f3 = Boot frame
#    - using OS boot timestamp to create a sample runtime frame timestamp

# r3 = Scene frame
# r4 = Relative frame (in microframes)
#    + FFF00000 = full frames
#    + 000FFFFF = microframes
#    - microframes count in-between frames, relative to the performance monitor timestamps
#    - full frames will be <1 unless something is causing the scene frame ticks to stall:
#      - >1 when the GProc or GXDraw step of a scene takes too long
#      - >1 when the CPU is stalling while waiting for hardware to sync
# r5 = Boot frame

# r6 = compressed ID: [r7, r8, r9]
#    - r6 is convenient for implementing into timestamp messages if individual IDs are not needed
# r7 = Scene Transition Count
# r8 = Major Scene ID
# r9 = Minor Scene ID
# r10, r11 = raw TBU, TBL
#          - r10, r11 make a timestamp counting from epoch in jan 2000 -- unnormalized

OSGlobals  = 0x80000000
Frac = 0x88888889
xBUS_MHz   = 0xF8
xBoot_time = 0x30D8
# clock speed and boot time references

Scene_Controller = 0x80479D30 + 0x10000
xMajor = 0    + (Scene_Controller & 0xFFFF) - 0x10000
xMinor = 3    + (Scene_Controller & 0xFFFF) - 0x10000
xFrame = 0x2C + (Scene_Controller & 0xFFFF) - 0x10000
# performance stat frame counter and scene controller IDs

Scene_transitions = 0x804320CC
# part of archive globals, apparently

xHSD_PerfStat = -0x3FA8
# r13 performance stat time base sample

fScene=1; fRel=2; fBoot=3
rScene=3; rRel=4; rBoot=5; rID=6; rTrans=7; rMajor=8; rMinor=9; rTBU=10; rTBL=11
fTicks=1; fFloor=2; fCeil=3; rCeil=6; rOS=7; rGlobals=8
xBoot=0xC; xRel=0x10

0: mftbu rTBU
mftbl rTBL
mftbu r0
cmpw r0, rTBU
bne- 0b
# get timestamp, correcting for unlikely (but possible) 85-second mark error

mflr r0
stwu sp, -0x20(sp)
stw  r0,  0x20+4(sp)
# callsafe prolog

lis  rOS, OSGlobals@h
lwz  rCeil, xBUS_MHz(rOS)
lis r0, Frac@h
srwi rCeil, rCeil, 2
ori r0, r0, Frac@l # fixed point fraction
mulhwu r3, r0, rCeil # high multiply, to apply fixed point fraction
li r4, 5
bl <fixed_u32.float>
# all casting functions called here have a minimal impact on volatile registers
# - only r0, r3, r4, f0, f1 are affected

fmr fCeil, fTicks
fsubs fFloor, fCeil, fCeil
# fCeil represents a total number of ticks per 'frame', according to BUS speed
# fFloor = 0.0
# - this formats a call/return register pipeline for the <norm> instruction that we can re-use

# <norm> is like a safe division operation that provides a reciprocal and optional floor
#   - f1 = in/out;  f2 and f3 stay the same as a ceiling/floor for sequential division ops

lwz  r3, xBoot_time+0(rOS)
lwz  r4, xBoot_time+4(rOS)
subfc r4, r4, rTBL
subfe r3, r3, rTBU
bl <s64.float>
lfs f0, -0x7FD8(rtoc)
fdiv f1, f1, f0
# boot ticks have been sampled, casted, and normalized into a percentage in f1

stfs f1, xBoot(sp)
bl <float.u32>
mr rBoot, r3
# rBoot is now ready for return, and fBoot is stored in stack frame

lwz r3, xHSD_PerfStat+0(r13)
cmpwi r3, 0
lwz r4, xHSD_PerfStat+4(r13)
beq- 0f
  subfc r4, r4, rTBL
  subfe r3, r3, rTBU
  bl <s64.float>
  lfs f0, -0x7FD8(rtoc)
  fdiv f1, f1, f0
  # Performance stat sample is used to create relative timestamp base
  # - if not available (before first frame of the first scene), then use boot time instead

0:
stfs f1, xRel(sp)
li r3, 20
bl <float.fixed_u32>
#  20-bit fractional component == micro-frame units

stw r3, xRel+4(sp)
lis rGlobals, Scene_Controller@h
lwz r3, xFrame(rGlobals)
bl <u32.float>
lwz rRel, xRel+4(sp)
lfs fRel, xRel(sp)
lfs fBoot, xBoot(sp)
# all timestamps are ready for return:
#   rScene, fScene
#   rRel,   fRel
#   rBoot,  fBoot

lis rTrans, Scene_transitions@h
lbz rMinor, xMinor(rGlobals)
lwz rTrans, (Scene_transitions & 0xFFFF) (rTrans)
lbz rMajor, xMajor(rGlobals)
rlwinm rID, rTrans, 16, 0xFFFF0000
rlwimi rID, rMajor, 8, 0xFF00
rlwimi rID, rMinor, 0, 0xFF
# Scene transition ID has been compiled

_return:
lwz  r0,  0x20+4(sp)
addi sp, sp, 0x20
mtlr r0
blr
