  -==-

Reloc array test
Relocates pointers to log strings printed at CSS
[Punkline]

NTSC 1.02 --- 802640f8 ---- be21011c -> Branch
# start of CSS loading function
stmw	r17, 0x011C (sp)
# f14...f31 also available


.macro bpoint, p; .long (\p - .) | 0x48000000; .endm
# encodes a relative pointer syntax that isn't limited to word alignments
# - branch instructions work too, but they can't reach bytes in-between words


bl <point.inline>
b _end_of_data

  _data:
  bpoint 0f
  bpoint 1f
  bpoint 2f
  bpoint 3f # these branches serve as relocatable 'relative offsets'
  .long 0   # - null terminator

  bpoint 0f
  bpoint 1f
  bpoint 2f
  bpoint 4f # another copy of the pointers, for testing a specific count of '4' relocations

  0: .asciz " %s%s%s"
  1: .asciz "Hello"
  2: .asciz " World"
  3: .asciz "?"
  4: .asciz "!"
  .align 2  # - byte alignment

_end_of_data:
# r3 = start of 'data' table
# r4 can be ignored, since we're using branches as offsets
li r5, 4  # r5 = pointers are 4 bytes apart
li r6, -1 # r6 = null terminated list (count is negative)
bl <reloc.array>

# The above branches have been relocated into pointers
# r3 is still start of 'data' table

subi r31, r3, 4
# subtract 4, to iterate through pointer list

lwzu r3, 0x4(r31)
lwzu r4, 0x4(r31)
lwzu r5, 0x4(r31)
lwzu r6, 0x4(r31)
bl <log.printf>
# if pointers all relocated correctly, "Hello World?" should print in dolphin logger

addi r3, r31, 0x8
li r5, 4
li r6, 4 # r6 = exact number of pointers to relocate
bl <reloc.array>
# the second table has also been relocated, with a specific count
# - null terminator is not needed in the list, this way

subi r31, r3, 4
lwzu r3, 0x4(r31)
lwzu r4, 0x4(r31)
lwzu r5, 0x4(r31)
lwzu r6, 0x4(r31)
bl <log.printf>
# Prints "Hello World!"


_return:
lis	r4, 0x803F
.long 0


  -==-

Reloc List test
Similar to array test, but uses linked lists
[Punkline]


NTSC 1.02 --- 802640f8 ---- be21011c -> Branch
# start of CSS loading function
stmw	r17, 0x011C (sp)
# f14...f31 also available

bl <point.inline>
b _end_of_data

  _data:
  b 0f  # point to first linked element
  # - all elements are physically out of order, but are in the correct linked order

  b 0 ; 4: .asciz "!"
  .align 2  # a branch to self will be interpreted as a null terminator

  b 4b; 3: .asciz "?"
  .align 2

  b 2f; 1: .asciz "Hello"
  .align 2

  b 3b; 2: .asciz " World"
  .align 2

  b 1b
  0: .asciz " %s%s%s"
  .align 2


_end_of_data:
bl <point>
mr r3, r5 # r3 = first linked element
# r4 can be ignored because we are using relative branch syntaxes
li r5, -4 # r5 = pointers are at offset -4, from each string
li r6, -4 # r6 = these pointers are also used to navigate to the next element
li r7, -1 # r7 = null terminated list (count is negative)
bl <reloc.list>
lwz r4, -4(r3)
lwz r5, -4(r4)
lwz r6, -4(r5)
lwz r6, -4(r6)
bl <log.printf>

_return:
lis	r4, 0x803F
.long 0



-==-

ARAM copy test
Writes out 0x20 bytes of DEADBEEF, copies it into specific place in ARAM, and copies it back out of ARAM
[Punkline]

NTSC 1.02 --- 802640f8 ---- be21011c -> Branch
# start of CSS loading function
stmw	r17, 0x011C (sp)
# f14...f31 also available

li r3, 0x40
bl <alloc>
mr r31, r3
# r31 = our RAM allocation

lis r4, 0xDEAD
li r0, 8
ori r4, r4, 0xBEEF
mtctr r0
subi r5, r31, 4
0: stwu r4, 0x4(r5)
  bdnz+ 0b
  # write deadbeef pattern over 0x20 bytes

li r3, 1
li r4, 0x20
bl <alloc>
mr r30, r3
# r30 = our ARAM allocation

mr r4, r31    # r3 = ARAM address (destination)
li r5, 0x20   # r4 = RAM address  (source)
bl <copy>     # r5 = copy size
# ARAM address 0xFF0000 should now have 0x20 bytes of deadbeef

addi r3, r31, 0x20  # r3 = RAM address +0x20  (destination)
mr   r4, r30        # r4 = ARAM address (source)
li   r5, 0x20       # r5 = copy size
bl <copy>
# A copy of the deadbeef pattern should be copied into the first one in RAM, from ARAM

_return:
lis	r4, 0x803F
.long 0
