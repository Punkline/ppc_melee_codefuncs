-==-

CSS TESTS - DVD Loading Safety
While hovering over icon in CSS...

DUp = load "GmPause.usd" (with no safety logic in place)
DDown = load "GmPause.usd" ONLY if there is room in heap

DRight = load "test.hax" ONLY if file exists
DLeft = load "test.hax" ONLY if file exists, and there is room

All loads are made redundantly using OSHeap space
Icon textures will transform into a visual representation:
- repeated loads will eventually exhaust free bytes available
- if a file is loaded while out of space, the game will freeze
- if a file name isn't found in FST, it is safely avoided in all cases
[Punkline]



Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
NTSC 1.02 --- 0x80260c14 ---- 88030002 -> Branch
.include "melee";
punkpc ppc          # powerpc utilities
melee MPad, DVD, mem, HSDObj
regs -1, /*
*/ (r31), rHand, rBase, rHandJObj, rInput, /*
*/ (r24), rIcon, rBackup, /*
*/ (r20), rIconID, rPlayerID
r13.xCSSJObjRoot    = -0x49E0

enum (0x80), +1, SFX.true, SFX.false
mr rIcon, r3
mr rBackup, r4
prolog r16, +0x100, xReturns
regs /*
*/ (r27), rData, rSFX, rMPad, /*
*/ (r22), rStart, rRoot

load rMPad, MPad.addr
mulli r0, rPlayerID, MPad.size
add rMPad, rMPad, r0
lwz r0, MPad.xOnPress(rMPad)
mtcrf MPad.crf.mDPad, r0
addi rStart, rBase, 0x803f0b24 - 0x803f0a48
rlwinm. r0, r0, 0, MPad.mDPad
lwz rRoot, r13.xCSSJObjRoot(r13)
beq- _return
data.start
  0: .asciz "GmPause.usd"
  1: .asciz "test.hax"
  align 2
  # include file name strings as inline data

  data.struct 0, "data.", xDefault, xTest
  # count labels up to 1: and give them struct offset names

data.end rData
li rSFX, SFX.false

bt- MPad.bDDown, _DDown
bt- MPad.bDUp, _DUp
bt- MPad.bDLeft, _DLeft
bt- MPad.bDRight, _DRight
b _return
# The DPad bools encode a conditional branch to a programmable handler...

  _DDown:  # --- Safe GmPause.usd Load
    addi r3, rData, data.xDefault
    bl <DVD.file>
    bt- DVD.file.bInvalid, _play_sfx
    # fail if file isn't found for some reason

    mr r4, DVD.file.rSize
    li r3, 0
    bl <mem.info>
    # else, get byte size from file system table, and check for free alloc of that size in heap

    bf- mem.info.bIsAvailable, _play_SFX
    # fail if requested bytes aren't available

      li rSFX, SFX.true
      addi r3, rData, data.xDefault
      b _read_and_update
      # else, commit to reading default file, and display RAM



  _DUp:  # --- Unsafe GmPause.usd Load
  li rSFX, SFX.true
    addi r3, rData, data.xDefault
    b _read_and_update
    # no protections on DUP, just read default file

  _DLeft:  # --- Safe test.hax load
    addi r3, rData, data.xTest
    bl <DVD.file>
    bt- DVD.file.bInvalid, _play_SFX
      mr r4, DVD.file.rSize
      li r3, 0
      bl <mem.info>
      bf- mem.info.bIsAvailable, _play_SFX
        addi r3, rData, data.xTest
        b _read_and_update
        # essentially just the same as DDown -- but for different file

  _DRight:
  addi r3, rData, data.xTest
  # coninue into _read_and_update...

  _read_and_update:
  li r4, 0
  bl <DVD.read>
  bl <CSS.icon_display_RAM>

  _play_SFX:
  mr r3, rSFX
  bl <SFX.play>

_return:
epilog
mr r4, rBackup
mr r3, rIcon
# recover old context before finishing injection code...

# original instruction, and return from injection:
lbz	r0, 0x0002 (r3)
.long 0




# --- other funcs


<CSS.icon_display_RAM> NTSC 1.02
# takes no args
# - simply converts all icons in CSS into a display of 256x256 RGBA pixels from end of heap
#   - this reveals the data in the heap by representing words as uncompressed pixels
#   - all free space is zeroed out on first display

.include "melee"
punkpc ppc
melee MPad, DVD, mem, HSDObj
prolog rIcon, rCount, rFrag, +0x4, xReturn

Icon.start = 0x803f0b24
enum.enum_conc "Icon.",, (0), /*
*/ +1, xPortraitID, xNametagID, xSelectable, xIconID, xIconID_copy,/*
*/ (8), +4, xUnkID, +0x10, xBox, +0, size
# icon struct offsets

r13.xCSSJObjRoot    = -0x49E0
# used for fetching JObjs from skeleton root

load rIcon, (Icon.start-Icon.size)
li rCount, 25
li rFrag, 0

_for_each_icon_JObj:
  subic. rCount, rCount, 1
  addi rIcon, rIcon, Icon.size
  blt- _return

    _call:
    lwz r3, r13.xCSSJObjRoot(r13)
    lbz r4, Icon.xIconID_copy(rIcon)
    bl <JObj.select>
    regs rJObj, rDObj, rMObj, rTObj, rIDesc, rIArray
    lwz rDObj, JObj.xDObj(rJObj)
    lwz rDObj, DObj.xSibling(rDObj)
    lwz rMObj, DObj.xMObj(rDObj)
    lwz rTObj, MObj.xTObj(rMObj)
    lwz rIDesc, TObj.xImageDesc(rTObj)
    # image descriptor in 'rIDesc'

    lhz r0, ImageDesc.xWidth(rIDesc)
    cmpwi r0, 256
    beq- _return

      # This only runs when it detects un-mutated images
      cmpwi rFrag, 0
      bne+ 1f
        li r3, 0
        li r4, 0
        bl <mem.info>
        # this returns mem.info.* registers...

        add rFrag, mem.info.rStart, mem.info.rSize
        subis rFrag, rFrag, 25<<2
        # rFrag now points to a place towards the end of the largest heap fragment
        # - each icon will represent 1/16th of a megabyte

        mr r3, mem.info.rStart
        mr r4, mem.info.rSize
        bl <data.zero>
        # it is also zeroed out, so unloaded bytes display as black pixels with 0% alpha
        # - the line where pixels appear vs disappear represents the remaining heap fragment

        b _call
        # this sets up rFrag in cases where memory needs to be parsed, and retries call

      1:
      stw rFrag, ImageDesc.xPixels(rIDesc)
      lwz rIArray, TObj.xImageArray(rTObj)
      cmpwi rIArray, 0
      bge- 0f; stw rFrag, 0x0(rIArray); 0:
      addis rFrag, rFrag, 1<<2
      # update pixel data pointer
      # - this now points to a 256x256 block of words towards the end of the heap

      li r0, 256
      sth r0, ImageDesc.xWidth(rIDesc)
      sth r0, ImageDesc.xHeight(rIDesc)
      # update height/width

      li r0, 6
      stw r0, ImageDesc.xType(rIDesc)
      # change image type to uncompressed RGBA8 (type 6)

      b _for_each_icon_JObj

_return:
epilog
blr
