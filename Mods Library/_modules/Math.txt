-==-

Casting Functions

Cast full 32-bit ints <> floats using various fixed point scales
- All inputs are either u32 or s32
- Ints smaller than 32 (like s16) use remaining bits as a fraction
- Custom fraction sizes are allowed to exceed actual bit size

Cast Integer (r3) into -> Float (f1):
float.u32  # r3 -> 0xFFFFFFFF. : 0-bit fraction
float.u24  # r3 -> 0xFFFFFF.FF : 8-bit fraction
float.u16  # r3 -> 0xFFFF.FFFF : 16-bit fraction
float.u8   # r3 -> 0xFF.FFFFFF : 24-bit fraction
float.u0   # r3 -> 0x.FFFFFFFF : 32-bit fraction
float.scaled_u32  # r3 = int,  r4 = fraction bit count

float.s32  # r3 -> -0x7FFFFFFF. : 0-bit fraction
float.s24  # r3 -> -0x7FFFFF.FF : 8-bit fraction
float.s16  # r3 -> -0x7FFF.FFFF : 16-bit fraction
float.s8   # r3 -> -0x7F.FFFFFF : 24-bit fraction
float.scaled_s32  # r3 = int,  r4 = fraction bit count


Cast Float (f1) into -> Integer (r3):
u32.float  # r3 <- 0xFFFFFFFF. : 0-bit fraction
u24.float  # r3 <- 0xFFFFFF.FF : 8-bit fraction
u16.float  # r3 <- 0xFFFF.FFFF : 16-bit fraction
u8.float   # r3 <- 0xFF.FFFFFF : 24-bit fraction
u0.float   # r3 <- 0x.FFFFFFFF : 32-bit fraction
scaled_u32.float  # r3 = int,  r4 = fraction bit count

s32.float  # r3 <- -0x7FFFFFFF. : 0-bit fraction
s24.float  # r3 <- -0x7FFFFF.FF : 8-bit fraction
s16.float  # r3 <- -0x7FFF.FFFF : 16-bit fraction
s8.float   # r3 <- -0x7F.FFFFFF : 24-bit fraction
scaled_s32.float  # r3 = fraction bit count
[Punkline]


<float.u32> ALL
li r4, 0
b <float.scaled_u32>
<float.u24> ALL
li r4, 8
b <float.scaled_u32>
<float.u16> ALL
li r4, 16
b <float.scaled_u32>
<float.u8> ALL
li r4, 24
b <float.scaled_u32>
<float.u0> ALL
li r4, 32
b <float.scaled_u32>
<float.scaled_u32> ALL
li r0, 0
b <float.__scaled_cast>
<float.s32> ALL
li r4, 0
b <float.scaled_s32>
<float.s24> ALL
li r4, 8
b <float.scaled_s32>
<float.s16> ALL
li r4, 16
b <float.scaled_s32>
<float.s8> ALL
li r4, 24
b <float.scaled_s32>
<float.scaled_s32> ALL
lis r0, 0x8000
b <float.__scaled_cast>
<float.__scaled_cast> ALL
# handles signed/unsigned int->float with custom exponent
stwu sp, -0x20(sp)
  slwi r4, r4, 20
  stw r0, 0xC(sp)
  addis r4, r4, 0x4330
  xor r0, r3, r0
  stw r4, 0x8(sp)
  lfd f0, 0x8(sp)
  stw r0, 0xC(sp)
  lfd f1, 0x8(sp)
addi sp, sp, 0x20
fsub f1, f1, f0
blr


<u32.float> ALL
li r3, 0
b <scaled_u32.float>
<u24.float> ALL
li r3, 8
b <scaled_u32.float>
<u16.float> ALL
li r3, 16
b <scaled_u32.float>
<u8.float> ALL
li r3, 24
b <scaled_u32.float>
<u0.float> ALL
li r3, 32
b <scaled_u32.float>
<s32.float> ALL
li r3, 0
b <scaled_s32.float>
<s24.float> ALL
li r3, 8
b <scaled_s32.float>
<s16.float> ALL
li r3, 16
b <scaled_s32.float>
<s8.float> ALL
li r3, 24
b <scaled_s32.float>
<scaled_s32.float> ALL
lis r0, 0x4200
b <int.__scaled_cast>
<scaled_u32.float> ALL
li r0, 0
b <int.__scaled_cast>
<int.__scaled_cast> ALL
# handles signed/unsigned float->ints with custom exponent
stwu sp, -0x20(sp)
  cmpwi r0, 0
  stfd f1, 0x8(sp)
  lwz r4, 0x8(sp)
  slwi r3, r3, 20
  add r4, r4, r3
  lis r3, 0x3F00
  stw r4, 0x8(sp)
  lfd f1, 0x8(sp)
  stw r3, 0x10(sp)
  # apply modified scale to exponent of double-precision floating point

  lfs f0, 0x10(sp)
  fadd f1, f1, f0
  # add 0.5 so that floored integer is rounded on resulting cast

  beq+ 0f
    subic r0, r0, 1
    lis r3, 0xFFF0
    stw r0, 0x8(sp)  # 0x8 = fd Cap
    stw r3, 0xC(sp)
    li r0, 0
    lis r3, 0x4f80
    stw r0, 0x10(sp) # 0x10 = fs Zero
    stw r3, 0x14(sp) # 0x14 = fs overflow

    lfs f0, 0x10(sp)
    lfd f2, 0x8(sp)
    fsel f0, f1, f1, f0
    fsub f1, f2, f1
    fsel f1, f1, f0, f2
    # Cap has been applied

    lfs f2, 0x14(sp)
    fcmpu cr0, f1, f2
    fsub f0, f1, f2
    fsel f1, f0, f0, f1
    # Displace if signed cast would overflow

    li r0, 0
    blt+ 0f
      lis r0, 0x8000
      # r0 will be XORed into resulting int

  0:
  fctiwz f1, f1
  stfd f1, 0x8(sp)
  lwz r3, 0xC(sp)
  xor r3, r3, r0
addi sp, sp, 0x20
blr



-==-

Math Functions

rand.int  # return random 32-bit integer
<-- rRand

rand.max_int  # random int between 0 and 'rMax'
args: rMax
<-- rRand

rand.float  # random percent between 0.0 and 1.0
<-- fRand

rand.max_float  # random float between 0 and 'fMax'
args: fMax
<-- fRand

rand.fill  # fill target with random bits for 'rSize' bytes
args: rOut, rSize
<-- rOut


sin
cos
tan
asin
acos
atan  # all of these have a similar f1 interface
args: fAngle
<-- fOutput

atan2
args: fY, fX
<-- fAtan2


rsqrt  # reciprocal square root  (1 / SQRT)
args: fValue
<-- rRSQRT

sqrt  # square root (RSQRT * rValue)
args: fValue
<-- rSQRT


ps_byte_lerp  # hw accelerated lerps between an array of bytes
args: rFloor, rCeil, rOut, rCount, fCoef
<-- rFloor, rCeil, rOut, fCoef
# - rFloor, rCeil, and rOut are base pointers to arrays
# - rCount must be even, to work in pairs
# - results are floored and capped without rounding

color.lerp  # hw accelerated lerps between direct RGBA colors
args: rFloor, rCeil, fCoef
<-- rFloor, rCeil, rMixed, fCoef
# - rFloor, rCeil, and rMixed are RGBA colors, not pointers
# - results are rounded and capped

color.lerpi  # lerp takes 16-bit signed 0x7.FFF fixed point
args: rFloor, rCeil, rCoef
<-- rFloor, rCeil, rMixed, fCoef
# - last 3 hex digits in rCoef are a fraction (12-bit)
# - equiv floating point is returned in place of fixed point

[?, HSD, Punkline]




<ps_byte_lerp> ALL
# Fast Linear Interpolation between a pair of byte arrays
# - all outputs are capped to unsigned byte range

# --- args:
# r3 = address of input A base (floor)
# r4 = address of input B base (ceil)
# r5 = address of output base
# r6 = number of bytes (must be even)
# f1 = interpolation percentage (floor...ceil)

3C000804 7CF7E2A6
60000804 54C6003C
7C17E3A6 34C6FFFE
4180001C 1043338C
1064338C 10031028
1000105C 1003338E
4BFFFFE4 7CF7E3A6
4E800020


<color.lerp> ALL
7C0802A6 9421FFF0
90010014 3C003B00
90610010 90010010
7CD7E2A6 3C000804
C0810010 60000804
90810010 7C17E3A6
E0417010 E0617010
10031028 1042202A
E0617012 1000105C
E0417012 F0017010
10031028 1042202A
1000105C F0017012
80A10010 7CD7E3A6
80010014 38210010
7C0803A6 4E800020


<color.lerpi> ALL
9421FFF0 B0A10010
3CA00C07 7C17E2A6
7CB7E3A6 E021F010
7C17E3A6 38210010
b <color.lerp>






<rand> NTSC 1.02
# Produce a random 32-bit integer
# --- returns:
# r3 = rRand
b 0x803804f8



<rand.float> NTSC 1.02
# Produce a random float between 0.0 and 1.0
# --- returns:
# f1 = fRand
b 0x80380528



<rand.max_int> NTSC 1.02
# Produces a random integer between 0 and the given number
# --- args:
# r3 = rMax

# --- returns:
# r3 = rRand
b 0x80380580

<rand.max_float> NTSC 1.02
# Produces a random float between 0 and the given number
# --- args:
# f1 = fMax

# --- returns:
# f1 = fRand
7C0802A6 9421FFE0
90010024 D0210010
bl <rand.float>
C0010010 EC210032
80010024 38210020
7C0803A6 4E800020



<rand.fill> NTSC 1.02
# Fill n bytes with random bits at target location
# --- args:
# r3 = rOut
# r4 = rSize

# --- returns
# r3 = rOut
7C0802A6 9421FFE0
90010024 BFA10010
7C7E1B78 3BE3FFFE
7C9D2379 40810028
3C600002 3863FFFF
bl <rand.max_int>
37BDFFFE 41800010
B47F0002 4181FFE8
48000008 987F0002
7FC3F378 BBA10010
80010024 38210020
7C0803A6 4E800020



<sin> NTSC 1.02
# Calculate sine of angle in f1
# --- args:
# f1 = fAngle

# --- returns:
# f1 = fSin
b 0x803263d4



<cos> NTSC 1.02
# Calculate cosine of angle in f1
# --- args:
# f1 = fAngle

# --- returns:
# f1 = fCos
b 0x80326240



<tan> NTSC 1.02
# Calculate tangent of angle in f1
# --- args:
# f1 = fAngle

# --- returns:
# f1 = fTan
b 0x803261bc




<asin> NTSC 1.02
# Calculate arcsine of angle in f1
# --- args:
# f1 = fAngle

# --- returns:
# f1 = fAsin
b 0x80022dbc



<acos> NTSC 1.02
# Calculate arccosine of angle in f1
# --- args:
# f1 = fAngle

# --- returns:
# f1 = fAcos
b 0x80022d1c



<atan> NTSC 1.02
# Calculate arctangent of angle in f1
# --- args:
# f1 = fAngle

# --- returns:
# f1 = fAtan
b 0x80022e68



<atan2> NTSC 1.02
# Calculate atan2 of f1
# --- args:
# f1 = fY
# f2 = fX

# --- returns:
# f1 = fAtan2
b 0x80022c30



<rsqrt> NTSC 1.02
# Calculate reciprocal square root (1 / SQRT)
# --- args:
# f1 = fValue

# --- returns:
# f1 = fRSQRT
b 0x80022df8



<sqrt> NTSC 1.02
# Calculate square root from <rsqrt> * fValue
# --- args:
# f1 = fValue

# --- returns:
# f1 = fSQRT
mflr r0
stwu sp, -0x20(sp)
stw  r0,  0x20+4(sp)
stfs f1, 0x10(sp)
bl <rsqrt>
lfs f0, 0x10(sp)
fmuls f1, f1, f0
lwz  r0,  0x20+4(sp)
addi sp, sp, 0x20
mtlr r0
blr




-==-

MTX Math Functions

Matrix functions operate on matrix data from argument pointers rMtx*, rQuat*, and rVec*:


3x4 Mtx (model-view transformation) functions:

mtx.identity  # scale identity
args: rMtx

mtx.copy  # copy A -> B
args: rMtxA, rMtxB

mtx.conc  # write translation vector in rVec
args: rMtx, rVec

mtx.transpose  # transpose A -> B
args: rMtxA, rMtxB

mtx.inverse  # attempt inverse of A -> B; return success bool
args: rMtxA, rMtxB
<-- rSuccess


mtx.trans  # translation mtx using XYZ args
args: rMtx, fX, fY, fZ

mtx.quat  # rotate MTX using quaternion in rQuat (1x4 vec)
args: rMtx, rQuat

mtx.lookat  # rotate to look at target, using camera params
args: rMtx, rPos, rUpdir, rTarget

mtx.inv_conc  # inverse concat of mtx A and B in C
args: rMtxA, rMtxB, rMtxC

mtx.inv_trans  # inverse translation of A in B
args: rMtxA, rMtxB

mtx.get_rot
mtx.get_trans
mtx.get_scale  # write to rVec from rMtx
args: rMtx, rVec

mtx.rot  # rotate from Euler angle XYZ in rVec
args: rMtx, rVec

mtx.rotrad_vec  # rotate XYZ using rVec weights and Radian scale
args: rMtx, rVec, fRadians

mtx.rotrad  # rotrad, but for 1 axis X(0), Y(1), Z(2)
args: rMtx, rAxisID, fRadians

mtx.rotrig  # input pre-calculated sin/cos args, for speed
args: rMtx, rAxisID, fSin, fCos

mtx.srt  # Scale Rotate and Translate rMtx with rVec params
args: rMtx, rScale, rRot, rTrans, rOrigin
# - all args besides rMtx are 1x3 vectors
# - rOrigin can be null

mtx.srt_quat  # srt -- but use quaternion rotation (1x4)
args: rMtx, rScale, rQuat, rTrans, rOrigin

mtx.add_scaled  # rMtxC = fScale * rMtxA + rMtxB
args: rMtxA, rMtxB, rMtxC, fScale


Quaternion functions:
quat.slerp  # rotate rQuat C by interpolating from A and B
args: rQuatA, rQuatB, rQuatC, fCoef


Vector functions:
vec.add  # rVec C = A + B
vec.sub  # rVec C = A - B
args: rVecA, rVecB, rVecC

vec.scale  # rVec B = rVecA * fScale
args: rVecA, rVecB, fScale

vec.norm  # rVec B = A / mag(A)
args: rVecA, rVecB

vec.mag  # magnitude of rVec
args: rVec, fMag

vec.dot  # dot product of Vec A and B, returned in f1
args: rVecA, rVecB
<-- fProduct

vec.cross  # cross product rVecC = rVecA x rVecC
args: rVecA, rVecB, rVecC
[MTX, HSD]
# --- 3x4 TRANSFORMATION MATRIX FUNCS

<mtx.identity> NTSC 1.02
# Assigns scale identity to 3x4 matrix
# --- args:
# r3 = rMtx
b 0x803421a4



<mtx.copy> NTSC 1.02
# Copies 3x4 matrix from A to B
# --- args:
# r3 = rMtxA
# r4 = rMtxB
b 0x803421d0



<mtx.conc> NTSC 1.02
# Returns Translation Vector
# --- args:
# r3 = rMtx
# r4 = rVec
b 0x80342204



<mtx.transpose> NTSC 1.02
# Assigns transpose of mtx A to B
# --- args:
# r3 = rMtxA
# r4 = rMtxB
b 0x803422d0



<mtx.inverse> NTSC 1.02
# Attempts to assign inverse of A to B;  returning '1' if successful
# --- args:
# r3 = rMtxA
# r4 = rMtxB

# --- returns:
# r3 = rSuccess
b 0x80342320



<mtx.trans> NTSC 1.02
# Assigns a translation matrix using X, Y, and Z args
# --- args:
# r3 = rMtx
# f1 = fX
# f2 = fY
# f3 = fZ
b 0x80342634



<mtx.scale> NTSC 1.02
# Assigns scale XYZ to mtx
# --- args:
# r3 = rMtx
# f1 = fX
# f2 = fY
# f3 = fZ
b 0x80342668



<mtx.quat> NTSC 1.02
# Assigns rotation X, Y, and Z using given quaternion rQuat (1x4 mtx)
# --- args:
# r3 = rMtx
# r4 = rQuat
b 0x80342690



<mtx.lookat> NTSC 1.02
# Assigns rotation that looks at target, with camera params
# --- args:
# r3 = rMtx
# r4 = rPos     - an X, Y, Z point in world-space
# r5 = rUpdir   - an X, Y, Z vector (from rPos)
# r6 = rTarget  - an X, Y, Z point in world-space
b 0x80342734



<mtx.inv_conc> NTSC 1.02
# Returns inverse concatenation of mtx A and B in mtx C
# --- args:
# r3 = rMtxA
# r4 = rMtxB
# r5 = rMtxC
b 0x80379598



<mtx.inv_trans> NTSC 1.02
# Returns inverse translation of mtx A in mtx B
# --- args:
# r3 = rMtxA
# r4 = rMtxB
b 0x80379a20



<mtx.get_rot> NTSC 1.02
# Returns rotation XYZ in vec
# --- args:
# r3 = rMtx
# r4 = rVec
b 0x80379c24



<mtx.get_trans> NTSC 1.02
# Returns translation vec
# --- args:
# r3 = rMtx
# r4 = rVec
b 0x80379f6c



<mtx.get_scale> NTSC 1.02
# Returns scale vec
# --- args:
# r3 = rMtx
# r4 = rVec
b 0x80379f88



<mtx.rot> NTSC 1.02
# Rotate from vec
# --- args:
# r3 = rMtx
# r4 = rVec
b 0x8037a120



<mtx.rotrad_vec> NTSC 1.02
# Assigns a rotation to X, Y, and Z using given VEC weights
# --- args:
# r3 = rMtx
# r4 = rVec
# f1 = fRadians
b 0x80342530



<mtx.rotrad> NTSC 1.02
# Assigns a rotation to single axis X(0), Y(1), or Z(2)
# Use rotrad to abstract away the trig functions, and calculate them internally
# - radians is counter-clockwise
# - 2Pi radians == 1 full rotation
# --- args:
# r3 = rMtx
# r4 = rAxis
# f1 = fRadians
b 0x80342418



<mtx.rotrig> NTSC 1.02
# Assigns a rotation to a signle axis X(0), Y(1), or Z(2)
# Use rotrig to handle the trig yourself, for precalculated args
# --- args:
# r3 = rMtx
# r4 = rAxis
# f1 = fSin
# f2 = fCos
b 0x80342488



<mtx.srt> NTSC 1.02
# Scale, Rotate, and Translate rMtx
# --- args
# r3 = rMtx
# r4 = rScale vec
# r5 = rRot vec
# r6 = rTrans vec
# r7 = rOrigin vec  - can be null
b 0x8037a250



<mtx.srt_quat> NTSC 1.02
# Scale, Rotate and Translate rMtx (from quaternion)
# --- args:
# r3 = rMtx
# r4 = rScale vec
# r5 = rRot quat
# r6 = rTrans vec
# r7 = rOrigin vec  - can be null
b 0x8037a43c



<mtx.add_scaled> NTSC 1.02
# Returns mtx C = fScale * mtx A + mtx B (fmadds)
# r3 = rMtxA
# r4 = rMtxB
# r5 = rMtxC
# f1 = fScale
b 0x8037a54c



# --- 1x4 QUATERNION FUNCS

<quat.slerp> NTSC 1.02
# Returns quat C using fCoef to SLerp between quat A and quat B
# --- args:
# r3 = rQuatA
# r4 = rQuatB
# r5 = rQuatC
# f1 = fCoef
b 0x8037ef28



# --- 1x3 VECTOR FUNCS

<vec.add> NTSC 1.02
# Adds VecC = VecA + VecB
# --- args:
# r3 = rA
# r4 = rB
# r5 = rC
b 0x80342d54



<vec.sub> NTSC 1.02
# Subtracts VecC = VecA + VecB
# --- args:
# r3 = rA
# r4 = rB
# r5 = rC
b 0x80342d78



<vec.scale> NTSC 1.02
# Multiplies VecB = VecA * fScale
# --- args:
# r3 = rA
# r4 = rB
# f1 = fScale
b 0x80342d9c



<vec.norm> NTSC 1.02
# Normalizes VecB = VecA / mag(VecA)
# --- args:
# r3 = rA
# r4 = rB
b 0x80342db8



<vec.mag> NTSC 1.02
# Returns Magnitude of Vec
# --- args:
# r3 = rVec
# f1 = fMag
b 0x80342dfc



<vec.dot> NTSC 1.02
# Returns the dot product of VecA and VecB in f1
# --- args:
# r3 = rA
# r4 = rB

# --- returns:
# f1 = fProduct
b 0x80342e38



<vec.cross> NTSC 1.02
# Returns VecC = cross product of VecA and VecB
# --- args:
# r3 = rA
# r4 = rB
# r5 = rC
b 0x80342e58
