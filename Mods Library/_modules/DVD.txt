-==-

DVD Functions
[HSD, Punkline]
# DVD.file             rFile
# DVD.read             rFile, rOut
# DVD.read_async       rFile, rOut, rCallback, rCallbackArg
# DVD.read_part        rFile, rOut, rStart, rBytes
# DVD.read_part_async  rFile, rOut, rStart, rBytes, rCallback, rCallbackArg
# DVD.read_archive     rFile, rOut, rArchive
# DVD.async_info       rQuery
# DVD.sync             --
# DVD.sync_to          rQuery
# archive.init         rArchive, rFileStart, rFileSize
# archive.symbol       rArchive, rSymbol

<DVD.file> NTSC 1.02
# Returns a file entrynum, a path string, a file size, and a dvd offset
# --- args:
# r3 = file
#  - this can be...
#    a file entrynumber -- nearly instant lookup
#    a file offset, for DVD -- slow lookup
#    a file path string pointer -- slowest lookup

# --- returns:
# cr1.eq = True if path was invalid
# r3 = file entrynum -- or -1 if invalid
# r4 = file path pointer (static FST -- do not edit, read-only)
# r5 = file size
# r6 = file size (aligned)
# r7 = DVD offset
# r8 = FST entry
# r9 = (given path input argument)
7C0802A6 9421FFE0 90010024 BFC10010 7C7E1B79 7FE902A6 80CDBBE0 810DBBDC 80EDBBE4 7CE903A6 40A00034 3C008180 7C1E0040 40800010
bl 0x8033796c
2C030000 4080FFD8 4CC63242 3860FFFF 38C00000 38A0FFFF 38C0FFFF 48000060 54600027 41A2002C 3860FFFF 38E8FFF8 8487000C 7C1E2000 80070004 7CA40214 7C9E2800 4C402842 38630001 4002FFE4 4CC63182 7FE903A6 1C03000C 7D080214 80A80008 80880000 80E80004 3805001F 7C843214 54060034 7FC9F378 BBC10010 80010024 38210020 7C0803A6 4E800020




<DVD.read> NTSC 1.02
# DVD outputs a whole file at target location in RAM
# - game will stall while the file is loaded, and continue after finishing

# --- args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3 = entrynum
# r4 = output location
# r5 =  0
# r6 = file size
# r7 = -1
# r8 = -1
# r9 = HSD Arena Link (if applicable)
# r10 = path string
# r11 = 0
38A00000 38C0FFFF 38E0FFFF 3900FFFF
b <DVD.__read_handler>



<DVD.read_async> NTSC 1.02
# DVD outputs a whole file at target location in RAM over time
# - game will return immediately while file loads
# - you may provide a callback to run once the file has finished loading

# --- function args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)
# r5 = sync callback (called once DVD has finished ready asynchronously)
# r6 = sync callback arg (optional -- passed to sync callback)

# --- sync callback args:
# r3 = unknown index from 0x4(rAsync) -- sampled from -0x5650(r13) on async creation
# r4 = Copy of arg r6 from function args
# r5 = 0
# r6 = 0 if no error from DVD
# - do not attempt to sync DVD while in the middle of sync callback!

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3 = entrynum
# r4 = output location
# r5 =  0
# r6 = file size
# r7 = sync callback
# r8 = -1
# r9 = HSD Arena Link (if applicable)
# r10 = path string
# r11 = async file info pointer
7CA72B78 7CC93378 38C0FFFF 38A00000 3900FFFF
b <DVD.__read_handler>



<DVD.read_part> NTSC 1.02
# DVD outputs a specified contiguous section of a file
# - game will stall while file is loaded, and continue after finishing
# --- args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)
# r5 = file read offset (0 is start)
# r6 = bytes to load
# - offset and bytes are unsigned, and will cap at file boundaries

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3 = entrynum
# r4 = output location
# r5 = read offset
# r6 = read size (-1 if unable to load file)
# r7 = -1
# r8 = -1
# r9 = HSD Arena Link (if applicable)
# r10 = path string
# r11 = 0
38E0FFFF 3900FFFF
b <DVD.__read_handler>



<DVD.read_part_async> NTSC 1.02
# DVD outputs a specified contiguous section of a file over time
# - game will return immediately while file loads
# - you may provide a callback to run once the file has finished loading
# --- args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)
# r5 = file read offset (0 is start)
# r6 = bytes to load
# - offset and bytes are unsigned, and will cap at file boundaries
# r7 = sync callback
# r8 = sync callback arg (optional -- passed to sync callback)

# --- sync callback argument interface:
# r3 = unknown index from 0x4(rAsync) -- sampled from -0x5650(r13) on async creation
# r4 = Copy of arg r8 from function args
# r5 = 0
# r6 = 0 if no error from DVD

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3 = entrynum
# r4 = output location
# r5 = read offset
# r6 = read size (-1 if unable to load file)
# r7 = sync callback
# r8 = -1
# r9 = HSD Arena Link (if applicable)
# r10 = path string
# r11 = async file info pointer
7D094378 3900FFFF
b <DVD.__read_handler>



<DVD.read_archive> NTSC 1.02
# DVD outputs a DAT or USD file, and then initializes it
# - archive object will use or generate a 0x44-byte allocation that can be used to reference symbols
# --- args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)
# r5 = archive object (-1 for none, else syntax is similar to r4)

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3 = entrynum
# r4 = output location
# r5 =  0
# r6 = file size
# r7 = -1
# r8 = archive object
# r9 = HSD Arena Link (if applicable)
# r10 = path string
# r11 = 0
7CA82B78 38A00000 38C0FFFF 38E0FFFF
b <DVD.__read_handler>



<DVD.async_info> NTSC 1.02
# Returns pointer to a specific element in the async queue, or null if query isn't found
# If Query is -1, then the start of the queue is returned

# --- args:
# r3 = file, async info, sync callback, or output destination
#    Arg is used to identify one of the async file read info structs in the async queue
#    - if query has a sign bit, it checks the mentioned pointers in each element for a match
#    - otherwise, it will check for a matching entrynumber instead
#      - in cases where a pointer check fails, it is checked for a path string with <DVD.file>
#        - if the path string produces an entrynum, then a second pass is made with the entrynum
#    - if no match is made, then a null is returned and cr1.gt is false

# --- returns:
# cr1.lt = 'not synced'
# cr1.gt = 'match found'
# cr1.eq = 'synced'
# r3 = async info (null if no match)
# r4 = entrynum   (-1 if no match)

# --- Async Info structure:  - pointed to by returned r3
#    0x00 : POINT : to next info struct in async queue
#    - you may reach every queued read by following these linked pointers
#    0x04 : WORD  : unknown index -- gets passed to sync callback as r3 arg
#    0x08 : WORD  : File Entry Number -- can be input into <DVD.file> for info about the file
#    0x0C : WORD  : File Read Start -- offset of file to begin DVD read at
#    0x10 : POINT : to output destination
#    0x14 : WORD  : File Read Size
#    0x18 : HWORD : flags:
#                 + 0038 = 3-bit, unknown ID:
#                   0020 :  4 unknown (hardcoded by HSD wrapper -- maybe a hardware ID?)
#                 + 0007 = 3-bit, 'Destination' ID:
#                   0001 :  1 Virtual RAM (24MB)
#                   0003 :  3 Auxiliary RAM (16MB)
#    0x1A : HWORD : Error code (?) -- gets passed to sync callback as arg r6
#    0x1C : POINT : to sync callback (or null, if not used)
#    0x20 : WORD  : sync callback argument (or null, if not used) -- passed as arg r4
7C0802A6 9421FFE0 90010024 BFA10010 7FE00026 2C03FFFF 40A20010 806DC158 2C830000 4800007C 7C7E1B79 83ADC158 2C9D0000 4CA52982 40840068 41810054 2C1EFFFF 4182005C 48000028 7C1DF000 801D0010 807D001C 7D00F000 7D83F000 4CA25382 4CA57382 41850038 83BD0000 2C9D0000 4180FFD8 7FC3F378
bl <DVD.file>
4BFFFFA8 83BD0000 2C9D0000 40800014 801D0008 7C1E0000 4082FFEC 4CA21382 7FA3EB79 3880FFFF 7FC5F378 41820008 809D0008 7FEBF120 BBA10010 80010024 38210020 7C0803A6 4E800020




<DVD.sync> NTSC 1.02
# Causes the CPU to stall untill all pending file reads are finished syncing from DVD -> RAM
# - no args/returns
3860FFFF
b <DVD.sync_to>



<DVD.sync_to> NTSC 1.02
# Causes the CPU to stall until a specified file read has finished syncing from DVD->RAM
#  CPU will not stall if no file reads are recognized by arg input
#  CPU stall for ALL pending file reads if arg '-1' is given

# --- args:
# r3 = file, async info, sync callback, or output destination
# - checks each element in async_info queue for matching addresses
# - if one isn't found, input is fed into <DVD.file>, and the entrynums are checked against result
# - if entrynum isn't found in second pass, then no sync is made
7C0802A6 9421FFE0 90010024 90610010 80610010
bl <DVD.async_info>
4186000C
bl 0x800195d0
4BFFFFF0 80010024 38210020 7C0803A6 4E800020



<archive.init> NTSC 1.02
# Initialize a newly loaded archive file (DAT or USD file)
# - init will skip already-initialized files to prevent corruption of pointers in data sections
# - if a memory region ID is given instead of an allocation address, an allocation will be generated

# --- args:
# r3 = allocation for writing Archive Object information
# r4 = File start -- to be initialized
# r5 = exact file size
b 0x80016a54



<archive.symbol> NTSC 1.02
# Look up a symbol string in a given Archive Object to return the part of the file it represents

# --- args:
# r3 = archive object
# r4 = search query (address of string)

# --- returns:
# r3 = address of file section (or 0 if symbol not found)
b 0x80380358



# --- hidden layer

<DVD.__read_handler> NTSC 1.02
# Handles various types of read function inputs with verbose argument interface

# --- args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)
# r5 = file read offset (0 is start)
# r6 = bytes to load
# - offset and bytes are unsigned, and will cap at file boundaries
# r7 = sync callback (0 for none)
# r8 = archive object (-1 for none, else syntax is similar to r4)
# r9 = sync callback arg (optional -- passed to sync callback)

# --- sync callback args:
# r3 = unknown index from 0x4(rAsync) -- sampled from -0x5650(r13) on async creation
# r4 = Copy of arg r9 from function args
# r5 = 0
# r6 = 0 if no error from DVD

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3 = entrynum
# r4 = output location
# r5 = read offset
# r6 = read size (-1 if unable to load file)
# r7 = sync callback (if applicable)
# r8 = archive object (if applicable)
# r9 = HSD Arena Link (if applicable)
# r10 = path string
# r11 = async file info pointer (if applicable)
7C0802A6 9421FF00 90010104 BEA10010 7C9F2378 7CBA2B78 7CDB3378 7CF93B78 7D184378 7D354B78 3AE00000 3BC00000
bl <DVD.file>
418600DC 7C7D1B78 7C9E2378 7F9A2850 7C1CD840 40A00008 7F9BE378 3B9B001F 579C0034 7FE3FB79 41A0002C 2C030006 40800024 7F84E378
bl 0x80015bd0
2C180002 7C7F1B78 41A0000C 7C771B78 83E30004 7C7F1B78 7FE5FB79 38E00023 41810008 38E00021 7F29CB78 2C09FFFF 7FA3EB78 7F44D378 7F86E378 39000001 7EAAAB78 40820008 39200000
bl 0x8038f6d4
7F03C379 41A0001C 38800044
bl 0x80015bd0
2C180002 7C781B78 41A00008 83030004 2C19FFFF 40A20020
bl <DVD.sync>
2C18FFFF 41820020 7F03C378 7FE4FB78 7F65DB78
bl <archive.init>
7FA3EB78
bl <DVD.async_info>
7C761B78 7FA3EB79 7FE4FB78 4CC00382 7F45D378 2C160000 7F66DB78 4C821042 7F27CB78 7F08C378 7EE9BB78 7FCAF378 7ECBB378 BAA10010 80010104 38210100 7C0803A6 4E800020
