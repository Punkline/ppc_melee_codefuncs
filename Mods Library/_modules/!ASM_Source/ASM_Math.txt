-==-

Math Functions
[?, HSD, Punkline]
<rand> NTSC 1.02
# Produce a random 32-bit integer
# --- returns:
# r3 = rRand
b 0x803804f8



<randf> NTSC 1.02
# Produce a random float between 0.0 and 1.0
# --- returns:
# f1 = fRand
b 0x80380528



<randi> NTSC 1.02
# Produces a random integer between 0 and the given number
# --- args:
# r3 = rMax

# --- returns:
# r3 = rRand
b 0x80380580



<fill.rand> NTSC 1.02
# Fill n bytes with random bits at target location
# --- args:
# r3 = rOut
# r4 = rSize

# --- returns
# r3 = rOut
rOut = 31; rBuffer = 30; rLength = 29
mflr r0
stwu sp, -0x20(sp)
stw  r0,  0x20+4(sp)
stmw r29, 0x10(sp)
mr rBuffer, r3
addi rOut, r3, -2
mr. rLength, r4
ble- _return
# only fill if a length was given

_for_n_hwords:
  lis r3, 2
  subi r3, r3, 1  # a 17-bit 2's complement modulo should provide good entropy for hword fill
  bl <randi>
  subic. rLength, rLength, 2
  blt- _for_odd_byte
  sthu r3, 0x2(rOut)
  bgt+ _for_n_hwords
  b _return

_for_odd_byte:
stb r3, 0x2(rOut)
# we fill with hwords, but string might be unaligned to hwords
# - this extra byte at the end handles this case, if it applies

_return:
mr r3, rBuffer
lmw  r29, 0x10(sp)
lwz  r0,  0x20+4(sp)
addi sp, sp, 0x20
mtlr r0
blr



<sin> NTSC 1.02
# Calculate sine of angle in f1
# --- args:
# f1 = fAngle

# --- returns:
# f1 = fSin
b 0x803263d4



<cos> NTSC 1.02
# Calculate cosine of angle in f1
# --- args:
# f1 = fAngle

# --- returns:
# f1 = fCos
b 0x80326240



<tan> NTSC 1.02
# Calculate tangent of angle in f1
# --- args:
# f1 = fAngle

# --- returns:
# f1 = fTan
b 0x803261bc



<atan> NTSC 1.02
# Calculate arctangent of angle in f1
# --- args:
# f1 = fAngle

# --- returns:
# f1 = fAtan
b 0x80022e68



<asin> NTSC 1.02
# Calculate arcsine of angle in f1
# --- args:
# f1 = fAngle

# --- returns:
# f1 = fAsin
b 0x80022dbc



<acos> NTSC 1.02
# Calculate arccosine of angle in f1
# --- args:
# f1 = fAngle

# --- returns:
# f1 = fAcos
b 0x80022d1c



<atan2> NTSC 1.02
# Calculate atan2 of f1
# --- args:
# f1 = fY
# f2 = fX

# --- returns:
# f1 = fAtan2
b 0x80022c30



<rsqrt> NTSC 1.02
# Calculate reciprocal square root (1 / SQRT)
# --- args:
# f1 = fValue

# --- returns:
# f1 = fRSQRT
b 0x80022df8



<sqrt> NTSC 1.02
# Calculate square root from <rsqrt> * fValue
# --- args:
# f1 = fValue

# --- returns:
# f1 = fSQRT
mflr r0
stwu sp, -0x20(sp)
stw  r0,  0x20+4(sp)
stfs f1, 0x10(sp)
bl <rsqrt>
lfs f0, 0x10(sp)
fmuls f1, f1, f0
lwz  r0,  0x20+4(sp)
addi sp, sp, 0x20
mtlr r0
blr


<lerp2> NTSC 1.02
# quickly interpolate between 1 or 2 ranges
# --- args:
# f1 = coef
# f2 = (a1, a2)
# f3 = (b1, b2)
# --- returns:
# f4 = (c1, c2)
lfs f0, -0x7FD8(rtoc) # load constant "1.0" from rtoc
fsubs f4, f0, f1
ps_muls0 f0, f4, f1
ps_madd  f4, f2, f4, f0
blr



<lerp4> NTSC 1.02
# quickly interpolate between 2 ... 4 ranges
# --- args
# f1 = coef
# f2 = (a1, a2)
# f3 = (a3, a4)
# f4 = (b1, b2)
# f5 = (b3, b4)
# --- returns:
# f6 = (c1, c2)
# f7 = (c3, c4)
lfs f0, -0x7FD8(rtoc) # load constant "1.0" from rtoc
fsubs f7, f0, f1
ps_muls0 f0, f4, f1
ps_madd  f6, f2, f7, f0
ps_muls0 f0, f5, f1
ps_madd  f7, f3, f7, f0
blr



<norm> ALL
# Input uses a floating point range floor ... ceil to create a coef value scaled between 0.0 ... 1.0
# --- args:
# f1 = index  - value to scale between floor and ceil
# f2 = floor  - 0.0 key
# f3 = ceil   - 1.0 key

# --- returns:
# f1 = Coef, Reciprocal Coef:
#    p0 = Coef - the percent (0.0 ... 1.0) that index falls in range of [floor ... ceil]
#    p1 = RCoef - the number of times [floor ... index] fits inside of [floor ... ceil]

fSwap=0;fI=1;fFull=1;fCoef=1;fFloor=2;fCeil=3
ps_cmpo0 cr0, fI, fFloor
bne+ 0f
  b <float.zero>
0:
ps_cmpo0 cr0, fFloor, fCeil
bne+ 0f
  b <float.zero>
0:
ps_merge00 fI, fI, fCeil          # index, ceil
ps_merge00 fFloor, fFloor, fFloor # floor, floor  -
ps_sub fI, fI, fFloor             # num,   denom
ps_merge10 fSwap, fFull, fFull    # denom, num
# swap num and denom in fSwap

ps_div fCoef, fFull, fSwap        # coef, recip
blr
# fCoef = Coef, reciprocal Coef
# p0 = Coef - the percent (between 0.0 and 1.0) that f1 index falls in range of f2 floor and f3 ceil
# p1 = Recip - the number of times f1 ... f2 fits inside of f2 ... f3



<normi> ALL
# A version of norm that casts its inputs from s32 using fast quantization register scaling
# --- args:
# r3 = index  - value to scale between floor and ceil
# r4 = floor  - 0.0 key
# r5 = ceil   - 1.0 key

# --- returns:
# f1 = Coef, Reciprocal Coef:
#    p0 = Coef - the percent (0.0 ... 1.0) that index falls in range of [floor ... ceil]
#    p1 = RCoef - the number of times [floor ... index] fits inside of [floor ... ceil]

fLo=0;fSwap=0;fFull=1;fHi=1;fCoef=1;fNeg=12
li r0, 0x1007 # signed <<16 scale hwrod pairs
rlwimi r0, r0, 16, 0xFFFF0000
stwu sp, -0x20(sp)
mtspr 919, r0
# assign selected type to qr7

sub. r0, r3, r4
# generate numerator by subtracting quantized floor value from index

bne+ 0f
  b <float.zero>
  # handle case of dividing zero by anything by returning zero
  # - skip expensive division

0:
sth r0, 0x14(sp)
rlwinm r0, r0, 16, 0xFFFF
sth r0, 0x10(sp)
# write transposed numerator high and low

sub. r0, r5, r4
# generate denominator by subtracting quantized floor value from ceiling

bne+ 0f
  b <float.zero>
  # handle case of dividing by zero by returning zero
  # - prevents need for invoking slow exceptions if division produces infinity

0:
sth r0, 0x16(sp)
rlwinm r0, r0, 16, 0xFFFF
sth r0, 0x12(sp)
# write transposed denominator high and low

psq_l fHi, 0x10(sp), 0, 7 # signed high <<16
psq_l fLo, 0x14(sp), 0, 3 # unsigned low <<0
# fHi      fLo
# hi, hi,  lo, lo

addi sp, sp, 0x20
# done with stack frame, and this is a leaf so we don't have to manage lr

ps_neg fNeg, fLo
ps_sel fLo, fHi, fLo, fNeg
# Lows now reflect sign of high

ps_add fFull, fHi, fLo
# full numerator and denominator are now in fFull pair

ps_merge10 fSwap, fFull, fFull
# swap num and denom in fSwap

ps_div fCoef, fFull, fSwap
blr


<float.zero> ALL
# Simply loads zeroes into f1 and f0
li r0, 0
stwu sp, -0x20(sp)
stw r0, 0x10(sp)
lfs f1, 0x10(sp)
addi sp, sp, 0x20
fmr f0, f1
blr

-==-

MTX Math Functions
[MTX, HSD]
# --- 3x4 TRANSFORMATION MATRIX FUNCS

<mtx.identity> NTSC 1.02
# Assigns scale identity to 3x4 matrix
# --- args:
# r3 = rMtx
b 0x803421a4



<mtx.copy> NTSC 1.02
# Copies 3x4 matrix from A to B
# --- args:
# r3 = rMtxA
# r4 = rMtxB
b 0x803421d0



<mtx.conc> NTSC 1.02
# Returns Translation Vector
# --- args:
# r3 = rMtx
# r4 = rVec
b 0x80342204



<mtx.transpose> NTSC 1.02
# Assigns transpose of mtx A to B
# --- args:
# r3 = rMtxA
# r4 = rMtxB
b 0x803422d0



<mtx.inverse> NTSC 1.02
# Attempts to assign inverse of A to B;  returning '1' if successful
# --- args:
# r3 = rMtxA
# r4 = rMtxB

# --- returns:
# r3 = rSuccess
b 0x80342320



<mtx.rotrad> NTSC 1.02
# Assigns a rotation to X, Y, and Z using given VEC weights
# --- args:
# r3 = rMtx
# r4 = rVec
# f1 = fRadians
b 0x80342530



<mtx.rotrad1> NTSC 1.02
# Assigns a rotation to single axis X(0), Y(1), or Z(2)
# Use rotrad to abstract away the trig functions, and calculate them internally
# - radians is counter-clockwise
# - 2Pi radians == 1 full rotation
# --- args:
# r3 = rMtx
# r4 = rAxis
# f1 = fSin
b 0x80342418



<mtx.rotrig1> NTSC 1.02
# Assigns a rotation to a signle axis X(0), Y(1), or Z(2)
# Use rotrig to handle the trig yourself, for precalculated args
# --- args:
# r3 = rMtx
# r4 = rAxis
# f1 = fSin
# f2 = fCos
b 0x80342488



<mtx.trans> NTSC 1.02
# Assigns a translation matrix using X, Y, and Z args
# --- args:
# r3 = rMtx
# f1 = fX
# f2 = fY
# f3 = fZ
b 0x80342634



<mtx.scale> NTSC 1.02
# Assigns scale XYZ to mtx
# --- args:
# r3 = rMtx
# f1 = fX
# f2 = fY
# f3 = fZ
b 0x80342668



<mtx.quat> NTSC 1.02
# Assigns rotation X, Y, and Z using given quaternion rQuat (1x4 mtx)
# --- args:
# r3 = rMtx
# r4 = rQuat
b 0x80342690



<mtx.lookat> NTSC 1.02
# Assigns rotation that looks at target, with camera params
# --- args:
# r3 = rMtx
# r4 = rPos     - an X, Y, Z point in world-space
# r5 = rUpdir   - an X, Y, Z vector (from rPos)
# r6 = rTarget  - an X, Y, Z point in world-space
b 0x80342734



<mtx.invconc> NTSC 1.02
# Returns inverse concatenation of mtx A and B in mtx C
# --- args:
# r3 = rMtxA
# r4 = rMtxB
# r5 = rMtxC
b 0x80379598



<mtx.invtrans> NTSC 1.02
# Returns inverse translation of mtx A in mtx B
# --- args:
# r3 = rMtxA
# r4 = rMtxB
b 0x80379a20



<mtx.rot_get> NTSC 1.02
# Returns rotation XYZ in vec
# --- args:
# r3 = rMtx
# r4 = rVec
b 0x80379c24



<mtx.trans_get> NTSC 1.02
# Returns translation vec
# --- args:
# r3 = rMtx
# r4 = rVec
b 0x80379f6c



<mtx.scale_get> NTSC 1.02
# Returns scale vec
# --- args:
# r3 = rMtx
# r4 = rVec
b 0x80379f88



<mtx.rot> NTSC 1.02
# Rotate from vec
# --- args:
# r3 = rMtx
# r4 = rVec
b 0x8037a120



<mtx.srt> NTSC 1.02
# Scale, Rotate, and Translate rMtx
# --- args
# r3 = rMtx
# r4 = rScale vec
# r5 = rRot vec
# r6 = rTrans vec
# r7 = rOrigin vec  - can be null
b 0x8037a250



<mtx.srt_quat> NTSC 1.02
# Scale, Rotate and Translate rMtx (from quaternion)
# --- args:
# r3 = rMtx
# r4 = rScale vec
# r5 = rRot quat
# r6 = rTrans vec
# r7 = rOrigin vec  - can be null
b 0x8037a43c



<mtx.add_scaled> NTSC 1.02
# Returns mtx C = fScale * mtx A + mtx B (fmadds)
# r3 = rMtxA
# r4 = rMtxB
# r5 = MtxC
# f1 = fScale
b 0x8037a54c



# --- 1x4 QUATERNION FUNCS

<quat.slerp> NTSC 1.02
# Returns quat C using fCoef to SLerp between quat A and quat B
# --- args:
# r3 = rQuatA
# r4 = rQuatB
# r5 = rQuatC
# f1 = fCoef
b 0x8037ef28



# --- 1x3 VECTOR FUNCS

<vec.add> NTSC 1.02
# Adds VecC = VecA + VecB
# --- args:
# r3 = rA
# r4 = rB
# r5 = rC
b 0x80342d54



<vec.sub> NTSC 1.02
# Subtracts VecC = VecA + VecB
# --- args:
# r3 = rA
# r4 = rB
# r5 = rC
b 0x80342d78



<vec.scale> NTSC 1.02
# Multiplies VecB = VecA * fScale
# --- args:
# r3 = rA
# r4 = rB
# f1 = fScale
b 0x80342d9c



<vec.norm> NTSC 1.02
# Normalizes VecB = VecA / mag(VecA)
# --- args:
# r3 = rA
# r4 = rB
b 0x80342db8



<vec.mag> NTSC 1.02
# Returns Magnitude of Vec
# --- args:
# r3 = rVec
# f1 = fMag
b 0x80342dfc



<vec.dot> NTSC 1.02
# Returns the dot product of VecA and VecB in f1
# --- args:
# r3 = rA
# r4 = rB

# --- returns:
# f1 = fProduct
b 0x80342e38



<vec.cross> NTSC 1.02
# Returns VecC = cross product of VecA and VecB
# --- args:
# r3 = rA
# r4 = rB
# r5 = rC
b 0x80342e58



-==-
!
Color Math Functions
[Punkline]

<rgba.lerp> NTSC 1.02
# invokes lerp4 to mix (interpolate) between 2 4-channel byte vectors
# - intended for RGBA colors -- useful for anything that fits in data format though
# --- args:
# f1 = mix coef
# r3 = RGBA color A
# r4 = RGBA color B

# --- returns:
# r5 = mixed color C
# f1, r3, r4  are returned as given
# p2 = (rA, gA)  # lerp4 returns, for additional low level math
# p3 = (bA, aA)
# p4 = (rB, gB)
# p5 = (bB, aB)
# p6 = (rC, gC)
# p7 = (bC, aC)

mflr r0
stwu sp, -0x20(sp)
stw  r0,  0x20+4(sp)
stw r3, 0x10(sp)
lis r0, 0x3B00
stw r4, 0x14(sp)
stw r0, 0x0C(sp)
bl <qr7.u8_8>

psq_l f2, 0x10(sp), 0, 7
psq_l f4, 0x14(sp), 0, 7
psq_l f3, 0x12(sp), 0, 7
psq_l f5, 0x16(sp), 0, 7
bl <lerp4>

lfs f0, 0x0C(sp)
ps_add f0, f6, f0
psq_st f0, 0x18(sp), 0, 7

lfs f0, 0x0C(sp)
ps_add f0, f7, f0
psq_st f0, 0x1A(sp), 0, 7

lwz  r5, 0x18(sp)
lwz  r0, 0x20+4(sp)
addi sp, sp, 0x20
mtlr r0
blr



<rgba.maplerp> NTSC 1.02
# Converts an integer index into a color interpolated from a table of indexed color keys
# --- args:
# r3 = idx
# r4 = map table
#      0x0 = 32-bit ordered index key
#      0x4 = RGBA color for this key
#      - if an index key smaller than the previous index key is found, the table terminates
#        - in most cases, this makes 0 a valid null terminator
# --- returns:
# r3 = floor color
# r4 = ceil color
# r5 = indexed color interpolation
# r6 = floor key
# r7 = ceil key
# r8 = given idx key
# r9 = given map table

# f1 ... f7 = lerp4 returns

rMap=31; rColor=30; rThis=29
rI=3; rFloor=4; rCeil=5; rReturn=5
xNext=0x8
mflr r0
stwu sp, -0x40(sp)
stw  r0,  0x40+4(sp)
stmw r28, 0x10(sp)
lwz rColor, 0x4(r4)
mr. rMap, r4
li rCeil, 0
subi rThis, rMap, xNext
bge- _return
# if map isn't a pointer, don't attempt to load it and just return a null color

_for_each_map_key:
  mr rFloor, rCeil
  lwzu rCeil, xNext(rThis)
  cmplw rFloor, rCeil
  bgt- _select_this
  # if out of order key is found, assume it's a terminator and extrapolate past last key using idx

    cmplw rI, rCeil
    lwz rColor, 0x4(r)
    bge+ _for_each_map_key

_select_this:


lmw  r28, 0x10(sp)
lwz  r0,  0x40+4(sp)
addi sp, sp, 0x40
mtlr r0
blr
