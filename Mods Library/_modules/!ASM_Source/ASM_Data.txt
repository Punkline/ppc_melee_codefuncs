-==-

Data Functions
[Punkline]



# --- DATA COPYING/FILLING

<zero> NTSC 1.02
# Zeroes out a given area by n bytes

# --- args:
# r3 = rData
# r4 = rLength

b 0x8000c160



<fill> NTSC 1.02
# Fills out a given area by n bytes with a given byte value

# --- args:
# r3 = rData
# r4 = rFill
# r5 = rLength

b 0x80003130



<copy> NTSC 1.02
# Copies data from r4 over to r3
# - ARAM addresses may be used in place of Virtual RAM addresses, but are much slower

# --- args:
# r3 = rCopy  - Copy data TO this address
# r4 = rFrom  - Copy data FROM this address
# r5 = rLength

cmpwi r3, 0
bge- 0f
  cmpwi r4, 0
  bge- 0f
    b 0x800031f4
0:
b <copy.ARAM_sync>



<copy.ARAM_sync> NTSC 1.02
# Copies data from r4 over to r3, allowing for ARAM addresses
# - CPU will wait until ARAM hardware has synced with RAM

# --- args:
# r3 = rCopy  - Copy data TO this address
# r4 = rFrom  - Copy data FROM this address
# r5 = rLength

li r6, -1
b <copy.ARAM_async>



<copy.ARAM_async> NTSC 1.02
# Copies data from r4 over to r3, allowing for ARAM addresses and sync callbacks
# - If a -1 is used in place of a callback address, this will become a sync copy instead of async
# - otherwise, the CPU will not wait for ARAM on return, allowing for immediate action
#   - the data being copied however will not be available for processing until ARAM has synced

# --- args:
# r3 = rCopy  - Copy data TO this address
# r4 = rFrom  - Copy data FROM this address
# r5 = rLength
# r6 = rSync  - sync callback, executes once the ARAM copy has finished
# r7 = rArg   - sync callback argument, gets passed as r3 to rSync when executed

mflr r0
stwu sp, -0x40(sp)
stw  r0,  0x40+4(sp)
b _end_of_data
# backed up r3...r12 for return of volatile context
# - branch over inline data

  _get_data: blrl
    _sync_callback:
    li r0, 1
    stw r0, 0(r3)
    blr # set flag once synced

  _data:
  .long 0

_end_of_data:
cmpwi r6, -1
bne- _async
# -1 is a special keyword for auto-syncing (used by <copy.ARAM_sync>, and <copy>)

  _auto_sync:
  bl _get_data
  mflr r6
  li r0, 0
  addi r7, r6, _data - _sync_callback
  stw r0, 0(r7)
  stw r7, 0x10(sp)
  bl _func_ARAM_write
  # if -1 was detected, we set up an auto-sync callback

    _still_syncing:
    lwz r3, 0x10(sp)
    lwz r0, 0(r3)
    cmpwi r0, 0
    bne- _return
      b _still_syncing
      # loop until synced

_async:
bl _func_ARAM_write
# custom callbacks can handle sync on their own

_return:
lwz  r0,  0x40+4(sp)
addi sp, sp, 0x40
mtlr r0
blr

_func_ARAM_write:
mflr r0
lis r8, 0x8043
stw r0, 0x0004 (sp)
stwu sp, -0x0058 (sp)
stmw r23, 0x0034 (sp)
mr  r25, r4  # r25 = Source of copy
mr. r26, r3  # r26 = Destination of copy
mr  r27, r5  # r27 = Size
mr  r23, r6  # r23 = Callback
mr  r24, r7  # r24 = Callback Argument
addi r31, r8, 0x16c0
# r31 = base of ARAM DMA queue structure

mr r4, r27   # r4 = size to invalidate or store in Data Cache (DC)
bge- 0f

  # --- ARAM to RAM
  li r29, 1
  mr r3, r26     # r3 = RAM destination,  r4 = size
  bl 0x803447DC  # DC Invalidate
  b 1f

  0: # --- RAM to ARAM
  li r29, 0
  mr r3, r25     # r3 = RAM source,  r4 = size
  bl 0x80344840  # DC Store

1: # r29 = copy op type, for queue request call arguments
# (we also swap the source/destination regs if writing, so that op type correctly selects them)

bl 0x80347364  # disable interrupts
addi r30, r3, 0
# r30 = backup interrupt flags

lwz r28, 0x1e0(r31)   # r28 = old queue pointer
stw r23, 0x28 (r28) # storing callback
stw r24, 0x2C (r28) # storing callback arg
mr r23, r29
# r23 and r24 are now safe to use

addi r29, r31, 0x1e0  # r29 = address of queue pointer
lwz r0, 0 (r28)       # r0 = link from old pointer
stw r0, 0 (r29)       # --- push stack with link from old pointer

addi r3, r31, 0x1e4
b 0f # seems to be some other list pointer at 0x4 of element

1:
mr r3, r0

0: lwz r0, 0 (r3)   # follow other list links until a null terminator is found
  cmplwi r0, 0
  bne+ 1b
  # r3 = last element in list

stw r28, 0 (r3)  # store old pointer in 0x4 of last element
li r3, 0
li r4, 1  # State of async
stw r3, 0x0(r28)
stw r4, 0x4(r28)  # some kind of metadata for informing the queue request

lis r3, 0x8001
addi r10, r3, 0x4AC4  # r10 = 80014AC4  -- callback event handler, for input callback and arg
addi r3, r28, 8  # r3 = base starting at 0x8 of element
mr r4, r28     # r4 = base of element (the metadata we just created)
mr r5, r23     # r5 = copy operation type (0 = write to ARAM,  1 = read from ARAM)
xori r6, r5, 1 # r6 = inverted type
mr r7, r25     # r7 =
mr r8, r26     # r8
mr r9, r27     # r9
b 0x80014c90  # branch into the middle of the ARAM read func from the Archive library
# - the stack frame and register context has been carefully designed to mimic this function




<strcmp> NTSC 1.02
# compares 2 null terminated strings A and B

# --- args:
# r3 = rA
# r4 = rB

# --- returns:
# r3 = rCmp
#      - 1 if equal, 0 if not equal

b 0x803258e8



<strncmp> NTSC 1.02
# Compares 2 strings of a given length

# --- args:
# r3 = rA
# r4 = rB
# r5 = rLength

# --- returns:
# r3 = rCmp
#      - 1 if equal, 0 if not equal

b 0x803258a8


<flush_DC> NTSC 1.02
# Flush the data cache in given range
# - useful for some forms of hardware reads, like GX indexing

# --- args:
# r3 = start address
# r4 = number of bytes to flush

b 0x8034480c


<flush_IC> NTSC 1.02
# Flush the instruction cache in given range
# - required if writing new instructions over old instructions

# --- args:
# r3 = start address
# r4 = number of bytes to flush

b 0x8000543c


# --- POINTER GENERATION AND RELOCATION

<point.here> ALL
# Returns the RAM address of the instruction that comes after the one calling this function
# - takes no arguments, just uses lr

# --- returns:
# r3 = rPC

## example:
# bl <point.here>
# _here:

mflr r3
blr



<point.inline> ALL
# Returns <point.here> value + 4 -- for reaching branched-over inline data

# --- returns:
# r3 = rInline

## example:
# bl <point.inline>
# b _data_end
# _data_start:
## <- data goes here
# _data_end:

mflr r3
addi r3, r3, 4
blr



<reloc> ALL
# Takes input pointer to an offset value and converts it into a RAM pointer
# --- args:
# r3 = address of offset value to relocate (to base)
# r4 = base address tp relocate to, if target is not a branch instruction
# - r4 is ignored if branches are found, using r3 instead

# --- returns:
# r3 = rPoint
# r4 = rBase
# r5 = rDest
# r6 = rOld
# --- Pointers with an offset of 0 will be treated as nulls
# cr bit 4 = bNull # cr1.lt  -- only true if a null was detected
# cr bit 6 = bAlreadyRelocated # cr1.eq

# If rPoint arg points to a branch instruction, rBase automatically gets set to rPoint
# - this means branches do not need to provide an r4 argument, and will use self location
#   - branches that use the low 2-bit byte indices will be accepted as valid relative offsets

# If rPoint is not a branch, then rBase will become the base of the relocation, for offset

# If rPoint has been relocated on this call, then rOld will have its unrelocated value
# - cr1.eq will also be returned as false

lis r7, 0x800
b <reloc.__flag_null>



<point> ALL
# Returns the destination normally applied by <reloc> -- but without writing a new pointer
# --- args:
# r3 = address of offset value to relocate (to base)
# r4 = base address tp relocate to, if target is not a branch instruction
# - r4 is ignored if branches are found, using r3 instead

# --- returns:
# r3 = rPoint
# r4 = rBase
# r5 = rDest
# r6 = rVal - value that would have been relocated if this were <reloc>
# --- Pointers with an offset of 0 will be treated as nulls
# cr bit 4 = bNull # cr1.lt  -- only true if a null was detected
# cr bit 6 = bAlreadyRelocated # cr1.eq

lis r7, 0x800
b <point.__flag_null>



<reloc.zero> ALL
# A variation of <reloc> that allows for 0-index offsets (doesn't turn them into nulls)
# --- args:
# r3 = address of offset value to relocate (to base)
# r4 = base address tp relocate to, if target is not a branch instruction
# - r4 is ignored if branches are found, using r3 instead

# --- returns:
# r3 = rPoint
# r4 = rBase
# r5 = rDest
# r6 = rOld
# cr bit 6 = bAlreadyRelocated # cr1.eq

lis r7, 0
b <reloc.__flag_null>



<point.zero> ALL
# A variation of <point> that allows for 0-index offsets (doesn't turn them into nulls)
# --- args:
# r3 = address of offset value to relocate (to base)
# r4 = base address tp relocate to, if target is not a branch instruction
# - r4 is ignored if branches are found, using r3 instead

# --- returns:
# r3 = rPoint
# r4 = rBase
# r5 = rDest
# r6 = rVal - value that would have been relocated if this were <reloc>
# cr bit 6 = bAlreadyRelocated # cr1.eq

li r7, 0
b <point.__flag_null>



<point.rel> ALL
# A variation of <point> that just makes 'rBase' relative to 'rPoint'
# --- args:
# r3 = address of offset value to relocate (relative to self)

# --- returns:
# r3 = rPoint
# r4 = rBase
# r5 = rDest
# r6 = rVal - value that would have been relocated if this were <reloc>
# --- Pointers with an offset of 0 will be treated as nulls
# cr bit 4 = bNull # cr1.lt  -- only true if a null was detected
# cr bit 6 = bAlreadyRelocated # cr1.eq
li r4, -1
b <point>



<reloc.array> ALL
# Relocates pointers within an array of contiguous structs of the same size
# - size of struct is used as a stride offset to iterate through the struct array
# --- args:
# r3 = first pointer to relocate
# r4 = base to relocate from (-1 for relative offsets)
# - r4 is ignored if branches are found, automatically setting this to -1
# r5 = stride size (number of bytes skip over to find next reloc pointer)
# r6 = count (-1 for null-terminated list)

# --- iter callback args:
# r3 = rPoint
# r4 = rBase
# r5 = rDest
# r6 = rVal - value that would have been relocated if this were <reloc>
# r7 = (given callback argument)
# cr bit 6 = bAlreadyRelocated # cr1.eq

# --- returns:
# r3 = start of list
mr r9, r6
li r6, -1
li r7, 0
b <reloc.list_cb>



<reloc.list> ALL
# Relocates a pointer within a list of linked structs
# --- args:
# r3 = first element in linked list
# r4 = base to relocate from (-1 for relative offsets)
# - r4 is ignored if branches are found, automatically setting this to -1
# r5 = offset of pointer to relocate (from struct element;  target for relocation)
# r6 = offset of link pointer (from struct element;  to next element)
# r7 = count (-1 for null-terminated list)
mr r9, r7
li r7, 0
b <reloc.list_cb>



<reloc.array_cb> ALL
# Relocates pointers within an array of contiguous structs of the same size untill a null is found
# - size of struct is used as a stride offset to iterate through the struct array
# - each pointer triggers a callback routine given in r6, and passes an argument given in r7
# --- args:
# r3 = first pointer to relocate
# r4 = base to relocate from (-1 for relative offsets)
# - r4 is ignored if branches are found, automatically setting this to -1
# r5 = stride size (number of bytes skip over to find next reloc pointer)
# - first null offset/pointer found terminates the parse
# r6 = iter callback (0 for no callback)
# r7 = iter callback arg (passed to callbacks)
# r8 = count (-1 for null-terminated list)


# --- iter callback args:
# r3 = rPoint
# r4 = rBase
# r5 = rDest
# r6 = rVal - value that would have been relocated if this were <reloc>
# r7 = (given callback argument)
# cr bit 6 = bAlreadyRelocated # cr1.eq

# --- returns:
# r3 = start of list
mr r9, r8
mr r8, r7
mr r7, r6
li r6, -1
li r7, 0
b <reloc.list_cb>



<reloc.list_cb> ALL
# Relocates a pointer within a linked list of elements until a null link is found
# - each pointer triggers a callback routine given in r7, and passes an argument given in r8
# --- args:
# r3 = start of list
# r4 = base to relocate from (-1 for relative offsets)
# r5 = offset of reloc pointer (this is an offset from r3)
# r6 = offset of link pointer (-1 for contiguous arrays)
# r7 = iter callback (0 for no callback)
# r8 = iter callback arg (passed to callbacks)
# r9 = count (-1 for null-terminated list)

# --- iter callback args:
# r3 = rPoint
# r4 = rBase
# r5 = rDest
# r6 = rVal - value that would have been relocated if this were <reloc>
# r7 = (given callback argument)
# cr bit 6 = bAlreadyRelocated # cr1.eq

# --- returns:
# r3 = start of list

rStore=24; rList=25; rBase=26; rRelocX=27; rLinkX=28; rCB=29; rArg=30; rCount=31
lt=0; gt=1; eq=2; bNull=4
mflr r0
stwu sp, -0x100(sp)
stw  r0,  0x100+4(sp)
stmw r25, 0x10(sp)
cmpwi r9, 0
addi rStore, sp, 0x80
stswi r3, rStore, 0x20
beq- _return
lmw r25, 0(rStore)
cmpwi rLinkX, -1
stw r11, 0xa0(sp)
stw r12, 0xa4(sp)
bne- _for_each_pointer
  cmpwi rRelocX, 0
  bne+ 0f
    li rRelocX, 4
    # if not a linked list, and reloc offset is 0 -- assume this is an array of pointers
    # - this causes the reloc index to become 4, for iterations
  0:
  sub rList, rList, rRelocX
  # when not using a linked lists, we start at index -1 so the first iter aligns with start of list

_for_each_pointer:
add r3, rList, rRelocX
mr r4, rBase
bl <reloc>
cmpwi rLinkX, -1
beq- 0f
  cmpwi rCB, 0
  mtlr rCB
  mr r7, rArg
  bltlrl
  add r3, rList, rLinkX
  mr r4, rBase
  bl <reloc>
  cmpwi rCount, 0
  crand eq, lt, bNull
  beq- _return
  # check for null terminator, if count is below 0

    lwz rList, 0(r3)
    b _iter_pointer
    # if a link offset was given, navigate the link pointer to find next list element

0:
cmpwi rCount, 0
crand eq, lt, bNull
beq- _return
# check for null terminator, if count is below 0

  cmpwi rCB, 0
  mtlr rCB
  mr r7, rArg
  bltlrl
  0: add rList, rList, rRelocX

  _iter_pointer:
  subic. rCount, rCount, 1
  bne+ _for_each_pointer
  # else, just use the reloc offset as a stride

_return:
lswi r3, rStore, 0x20
lwz  r11, 0xa0(sp)
lwz  r12, 0xa4(sp)
lmw  r25, 0x10(sp)
lwz  r0,  0x100+4(sp)
addi sp, sp, 0x100
mtlr r0
blr



# --- (hidden layer)

<reloc.__flag_null> ALL
# Hidden wrapper for point.__flag_null handler
bNull = 4; bAlreadyRelocated = 6
mflr r0
stwu sp, -0x20(sp)
stw  r0,  0x20+4(sp)
bl <point.__flag_null>
stw r5, 0x0(r3)
lwz  r0,  0x20+4(sp)
addi sp, sp, 0x20
mtlr r0
blr



<point.__flag_null> ALL
# Hidden handler for all point functions
rPoint = 3; rBase = 4; rDest = 5; rVal = 6; rNull = 7
bNull = 4; bAlreadyRelocated = 6; eq = 2; cr1.eq = 6

lwz rVal, 0(r3)
rlwinm r0, rVal, 8, 0xFC
cmpwi cr1, r0, 0x80
# this will update bAlreadyRelocated, but not bNull (which is in cr1.so)
# cr1.eq is true if this value is already a pointer

btlr+ bAlreadyRelocated
# --- return immediately if already relocated
# - predicted true, for use in reloc calls


  # else, determine what the destination is:
  cmpwi r0, 0x48
  bne+ 0f
    li rBase, -1
    # If rBase is -1, then it becomes == rPoint

    rlwinm rVal, rVal, 6, 0, 25
    srawi rVal, rVal, 6
  # if branch is detected, convert it into an offset relative to self address
  # - this includes the 2 bits that normally encode options for the branch syntax

  0:
  cmpwi rBase, -1
  bne+ 0f
    mr rBase, rPoint
  # if base is -1, then set it == rPoint

  0:
  add rDest, rBase, rVal
  rlwinm r0, rDest, 8, 0xFC
  cmpwi r0, 0x80
  cmpw cr1, rDest, rBase
  mfcr r0
  or r0, r0, rNull
  mtcrf 0x40, r0
  crand bNull, cr1.eq, bNull
  # if (evaluates to 0 idx AND nulls are being detected)

  crorc bAlreadyRelocated, bNull, eq
  bflr+ bAlreadyRelocated
  # or if (destination IS NOT a RAM address)
    li rDest, 0
    blr
    # ... then consider this as 'already relocated' and return a null pointer
