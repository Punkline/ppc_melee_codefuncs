-==-

GObj Operations

Functions:

GObj.run_GProcs  # normally called by frame event loop...
GObj.run_GXDraw
args: (none)

GObj.get_flag
args: rOffset
<-- rFlag

GObj.PLink_get
GObj.GXLink_get
These can be used to return a GObj from the global PLink (Processing) or GXLink (Drawing) groups for the current scene.
args: rLink, rClass, rIndex
<-- rGObj

# if rLink is a GObj address, then it is used as base link
# - else, rLink is an ID between 0...63

# if rClass is -1, then any class will qualify for lookup
# if rIndex is is out of bounds, then NULL rGObj is returned
# rIndex can be positive or negative to navigate next/prev



GObj Methods:
# the following all take a GObj argument in r3

GObj.new_GProc  # also attaches GProc to GObj
args: rGObj, rProcCB, rSPriority
<-- rGProc

GObj.clear_all_GProcs
args: rGObj

GObj.PLink_append  # insert as next PLink
args: rGObj, rPrevGObj

GObj.GXLink_append # insert as next GXLink
args: rGObj, rPrevGObj

GObj.destroy  # destroys HSD Obj, Data, and GProcs, too
args: rGObj

GObj.GXLink_setup  # sets up a GXDraw callback for Obj
args: rGObj, rDrawCB, rGXLink, rGXPriority

GObj.GXLink_setup_camera  # sets up a Drawing camera
args: rGObj, rDrawCB, rGXLink, rGXPriority

GObj.GXLink_destructor
args: rGObj

GObj.object_init  # attach an object instance to GObj
args: rGObj, rObjType, rObj
# rObjTypes:  0=SObj, 1=CObj, 2=LObj, 3=JObj, 4=Fog

GObj.object_release  # remove without destroying
args: rGObj
<-- rObj

GObj.object_destroy  # remove and run HSD destructor
args: rGObj


GObj.data_init  # attach a data table to GObj
args: rGObj, rDataType, rDestrCB, rData

GObj.data_destroy  # remove and run provided rDestrCB
args: rGObj


GObj.camera_set_texture
args: rGObj, rPasses

GObj.camera_set
args: rGObj
[HSD, Punkline]

<GObj.run_GProcs> NTSC 1.02
b 0x80390CFC
<GObj.run_GXDraw> NTSC 1.02
b 0x80390FC0
# args: (none)

<GObj.get_flag> NTSC 1.02
b 0x80390EB8
# args: rOffset
# <-- rFlag

<GObj.new_GProc> NTSC 1.02
b 0x8038FD54
# args: rGObj, rProcCB, rSPriority
# <-- rGProc

<GObj.clear_all_GProcs> NTSC 1.02
b 0x8038FED4
# args: rGObj

<GObj.PLink_append> NTSC 1.02
b 0x8038FF5C
# args: rGObj, rPrevGObj

<GObj.GXLink_append> NTSC 1.02
b 0x8039063C
# args: rGObj, rPrevGObj

<GObj.destroy> NTSC 1.02
b 0x80390228
# args: rGObj

<GObj.GXLink_setup> NTSC 1.02
b 0x8039069C
# args: rGObj, rDrawCB, rGXLink, rGXPriority

<GObj.GXLink_setup_camera> NTSC 1.02
b 0x8039075C
# args: rGObj, rDrawCB, rGXLink, rGXPriority

<GObj.GXLink_destructor> NTSC 1.02
b 0x8039084C
# args: rGObj

<GObj.object_init> NTSC 1.02
b 0x80390A70
# args: rGObj, rObjType, rObj

<GObj.object_release> NTSC 1.02
b 0x80390ADC
# args: rGObj
# <-- rObj

<GObj.object_destroy> NTSC 1.02
b 0x80390B0C
# args: rGObj


<GObj.data_init> NTSC 1.02
b 0x80390B68
# args: rGObj, rDataType, rDestrCB, rData

<GObj.data_destroy> NTSC 1.02
b 0x80390BE4
# args: rGObj


<GObj.camera_set_texture> NTSC 1.02
b 0x80390ED0
# args: rGObj, rPasses

<GObj.camera_set> NTSC 1.02
b 0x803910D8
# args: rGObj


<GObj.get_PLink> NTSC 1.02
li r6, -0x3E74
b <GObj.__get_link>
<GObj.get_GXLink> NTSC 1.02
li r6, -0x3E7C
b <GObj.__get_link>
<GObj.__get_link> NTSC 1.02
.include "melee"
melee GObj
punkpc regs
regs (r3), rClass, rLink, rIndex, rTable, rX
cmpwi rIndex, 0
li rX, GObj.xNext
bge+ 0f
  li rX, GObj.xPrev
  subi rTable, rTable, 4
  neg rIndex, rIndex
  # select descending groups instead of ascending, if using xPrev

0:
cmpwi rTable, r13.xGXLinks
bgt+ 0f
  addi rX, rX, GObj.xNextGX-GObj.xNext
  # use GX links instead of PLinks, if GX base is detected

0:
cmpwi rLink, 0
lwzx rTable, rTable, r13
blt- 0f
  slwi rLink, rLink, 2
  lwzx rLink, rLink, rTable
  # load PLink ID from rBase, if ID was provided

0:

_for_each_link:
  cmpwi rLink, 0
  bge- _return
  # return if null...

  cmpwi rClass, -1
  beq- _decr
  # skip class check if not looking for a specific class

  lhz r0, GObj.xClass(rLink)
  cmpw r0, rClass
  bne+ 0f
  # else, skip index decrement if class does not match

    _decr:
    subic. rIndex, rIndex, 1
    blt- _return
    # decrement index if class matches, and return if count has gone negative

  0:
  lwzx rLink, rLink, rX
  b _for_each_link
  # iterate until a null is found, or index decrement is exhausted

_return:
mr r3, rLink
blr

-==-
GProc Operations

Methods:
GProc.link
GProc.free
GProc.reparent
 args: rGProc
# these all just take a sole GProc argument
[HSD]

<GProc.link> NTSC 1.02
b 0x8038FAA8
<GProc.free> NTSC 1.02
b 0x8038FC18
<GProc.reparent> NTSC 1.02
b 0x8038FCE4
# args: rGProc
