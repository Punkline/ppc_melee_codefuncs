Default Symbols Dictionary
This symbols dictionary is used by arch.init to define all default "init.*" symbols and symbol handlers
- implements "init.flush", "init.static", and "init.call" by default
- see symbols tab for more info
[Punkline]

<arch.dict.init_default_events> NTSC 1.02
_head:
.long (_list_end - _list_start)>>2

_list_start:
  .long <<arch.init.event.flush>>
  .long <<arch.init.event.static>>
  .long <<arch.init.event.call>>


  # <-- add to this list to append defaults...
  # - or make a similar list and pass it to <arch.init> as r5
  #   - alternatively, pass it to <arch.event> as r12 to call independently of initialization

_list_end:



-==-

Archive "init.flush" handler

Adding an "init.flush" symbol to your DAT file will cause this event to trigger on <arch.init>

'.flush' allows you to specify regions of the file that have instructions
- the CPU may crash if reading new instruction data with mismatching cache data
 - this flush allows the instruction cache to be synced after new instructions are loaded

The file region for this symbol must begin with the following structure:
0x0 = number of regions to flush
0x4 = start of array of 8-byte pointer/size elements
    0x0 = point to start of flush region
    0x4 = specify number of bytes to flush
- each region will have the instruction cache use updated instructions on next execution
[Punkline]
<arch.init.event.flush> NTSC 1.02
.include "melee"
melee ppc, arch
b 0f; .asciz "init.flush"; align 2; 0:

prolog rParams, rCount
lwz rCount, 0(arch.event.rParams)
subi rParams, arch.event.rParams, 4

  _for_each:
  subic. rCount, rCount, 1
  blt- _return
  # terminate when count is finished

  lwz r4, 0x4(rParams)
  lwzu r3, 0x8(rParams)
  sub r4, r3, r4
  bl <data.flush_IC>
  b _for_each
  # flush each listed definition

_return:
epilog
blr

-==-

Archive "init.call" handler

Adding an "init.call" symbol to your DAT file will cause this event to trigger on <arch.init>

'.call' allows you to specify callback(s) to execute after the file has synced/initialized

The file region for this symbol must begin with the following structure:
 0x0 = number of callback pointers
 0x4 = start of array of 4-byte pointer elements
     0x0 = point to callback (in file) to be executed
- each listed callback pointer must be given an entry in the file's relocation table
- all parts of the file to be called should also be defined with "init.flush"
- each callback will be executed (in the order listed) right after the archive object is created
- each callback recieves arguments r3=Archive Object,  r4=Address of Self (callback)
- after table finishes execution, the table's count param is updated to prevent re-execution
[Punkline]
<arch.init.event.call> NTSC 1.02
.include "melee"
melee ppc, arch
b 0f; .asciz "init.call"; align 2; 0:

prolog rArch, rParams, rCount
mr rArch, arch.event.rArch
mr rParams, arch.event.rParams
lwz rCount, 0(rParams)
cmpwi rCount, 0
ble- _return
# skip if there are no pending init calls

neg r0, rCount
stw rCount, 0(rParams)
# else, update count param to indicate that these calls have been handled
# - this prevents any subsequent attempts to initialize from calling these a second time
# - negating instead of using null also allows this state to be undone be re-negating the count

_for_each:
  subic. rCount, rCount, 1
  blt- _return
  # handle each callback

  lwzu r4, 4(rParams)
  cmpwi r4, 0
  mtlr r4
  mr r3, rArch
  bltlrl+   # execute only if pointer is a valid addrress
  b _for_each

_return:
epilog
blr


-==-
Archive "init.static" handler

Adding an "init.static" symbol to your DAT file will cause this event to trigger on <arch.init>

'.static' allows you to specify a static RAM address to create a pointer  that points to a place in the file
- these pointers may be used by the rest of the game environment without knowledge of the file or its archive object

The file region for this symbol must begin with the following structure:
0x0 = number of static region pointers to create
0x4 = start of array of 0x8-byte link elements
    0x0 = pointer to static RAM addresss (not relocated, out of file)
    0x4 = pointer to file offset (relocated, inside of file)
- each specified RAM address will have the relocated file pointer written to its location
- when pointing to dynamic files this way, you will have to manage use of your static pointers accordingly
[Punkline]

<arch.init.event.static> NTSC 1.02
.include "melee"
melee ppc, arch
b 0f; .asciz "init.static"; align 2; 0:

regs rParams, rCount
subi rParams, arch.event.rParams, 4
lwz rCount, 0(arch.event.rParams)

_for_each:
  subic. rCount, rCount, 1
  bltlr-
  lwzu r5, 0x8(rParams)
  lwz r0, 0x4(rParams)
  stw r0, 0(r5)
  b _for_each
