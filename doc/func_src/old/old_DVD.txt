
-==-


DVD Functions
[HSD, Punkline]
# DVD.file             rFile
# DVD.read             rFile, rOut
# DVD.read_async       rFile, rOut, rCallback, rCallbackArg
# DVD.read_part        rFile, rOut, rStart, rBytes
# DVD.read_part_async  rFile, rOut, rStart, rBytes, rCallback, rCallbackArg
# DVD.read_archive     rFile, rOut, rArchive
# DVD.async_info       rQuery
# DVD.sync             --
# DVD.sync_to          rQuery
# archive.init         rArchive, rFileStart, rFileSize
# archive.symbol       rArchive, rSymbol


<DVD.file> NTSC 1.02
# Returns a file entrynum, a path string, a file size, and a dvd offset
# --- args:
# r3 = file
#  - this can be...
#    a file entrynumber -- nearly instant lookup
#    a file offset, for DVD -- slow lookup
#    a file path string pointer -- slowest lookup

# --- returns:
# cr1.eq = True if path was invalid
# r3 = file entrynum -- or -1 if invalid
# r4 = file path pointer (static FST -- do not edit, read-only)
# r5 = file size
# r6 = file size (aligned)
# r7 = DVD offset
# r8 = FST entry
# r9 = (given path input argument)


rNum=3;rPath=4;rLo=4;rSize=5;rHi=5;rCh=5;rStr=6;rAlign=6;rDVD=7;rX=7;rFST=8
rCTR=31;rInput=30
xStr=0x0;xDVD=0x4;xSize=0x8 # file entries from fst
cr1.eq=6;cr1.gt=5;cr1.lt=4;eq=2;gt=1;lt=0 # cr bits
xFSTEntries=-0x4424; xFSTPaths=-0x4420; xFSTCount=-0x441C # SData globals
mflr r0
stwu sp, -0x20(sp)
stw  r0,  0x20+4(sp)
stmw r30, 0x10(sp)
mr. rInput, rNum
mfctr rCTR # backup ctr in case function is called from a ctr loop

0:
lwz rStr, xFSTPaths(r13) # load FST Path Strings
lwz rFST, xFSTEntries(r13) # load FST base
lwz rX, xFSTCount(r13) # load number of entries
mtctr rX # we won't try to count above x
bge+ _path_is_positive
  # if input is not a positive number...
  # - it might be an address, or it could be a bad entrynum (-1 gets returned as an error)

  lis r0, 0x8180
  cmplw rInput, r0
  bge- _path_is_invalid
  # if sign bit, but unsigned addr is >= 0x81800000 -- then it can't be an address
  # - handle this like an invalid entrynum

    # if input is a pointer address, then pass it to DVDPathToEntrynum, and use entrynum
    _path_is_pointer:
    bl 0x8033796c
    cmpwi rNum, 0
    bge+ 0b

  _path_is_invalid:
  crset cr1.eq
  li rNum, -1
  li rStr, 0
  li rSize, -1
  li rAlign, -1
  b _return # if no path could be returned, return nulls and error codes
  # - cr1.eq will be true on return, and can be branched from immediately

_path_is_positive: # if rNum contains a positive number, check to see if it's big or small
rlwinm. r0, rNum, 0, -0x1000
beq+ _have_entrynum
# if it's larger than 12 bits, then it's almost certainly not an entrynumber

  _find_DVD_offset: # assume numbers larger than 12 bits are actually DVD offsets
  li rNum, -1
  addi rX, rFST, xDVD - 0xC

  _for_each_DVD_offset:
    lwzu rLo, 0xC(rX)
    cmpw rInput, rLo
    lwz r0, xSize - xDVD(rX)
    add rHi, rLo, r0
    cmpw cr1, rInput, rHi
    crnor eq, lt, cr1.gt
    addi rNum, rNum, 1
    bdnzf+ eq, _for_each_DVD_offset

_have_entrynum:
crclr cr1.eq
mtctr rCTR
mulli r0, rNum, 0xC
add rFST, rFST, r0
lwz rSize, xSize(rFST)
lwz rPath, xStr(rFST)
lwz rDVD, xDVD(rFST)
addi r0, rSize, 0x1F
add rPath, rPath, rStr
rlwinm rAlign, r0, 0, ~0x1F
mr r9, rInput

_return:
lmw r30, 0x10(sp)
lwz  r0,  0x20+4(sp)
addi sp, sp, 0x20
mtlr r0
blr



<DVD.read> NTSC 1.02
# DVD outputs a whole file at target location in RAM
# - game will stall while the file is loaded, and continue after finishing

# --- args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3  = entrynum
# r4  = output location
# r5  =   0   -- (read offset is always 0 for full loads)
# r6  = read size
# r7  =   -1  -- (sync callback is always blank on synchronous loads)
# r8  =   -1  -- (archive object are not created for non-archive loads)
# r9  = HSD Cache ID (if applicable)
# r10 = path string ()
# r11 =   0   -- (async info object is not available for synchronous reads)
li r5, 0
li r6, -1
li r7, -1
li r8, -1
b <DVD.__read_handler>



<DVD.read_async> NTSC 1.02
# DVD outputs a whole file at target location in RAM over time
# - game will return immediately while file loads
# - you may provide a callback to run once the file has finished loading

# --- function args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)
# r5 = sync callback (called once DVD has finished ready asynchronously)
# r6 = sync callback arg (optional -- passed to sync callback)

# --- sync callback args:
# r3 = unknown index from 0x4(rAsync) -- sampled from -0x5650(r13) on async creation
# r4 = Copy of arg r6 from function args
# r5 = 0
# r6 = 0 if no error from DVD
# - do not attempt to sync DVD while in the middle of sync callback!

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3  = entrynum
# r4  = output location
# r5  =   0   -- (read offset is always 0 for full loads)
# r6  = file size
# r7  = sync callback
# r8  =   -1  -- (archive object are not created for non-archive loads)
# r9  = HSD Cache ID (if applicable)
# r10 = path string
# r11 = async file info pointer
mr r7, r5
mr r9, r6
li r6, -1
li r5, 0
li r8, -1
b <DVD.__read_handler>



<DVD.read_part> NTSC 1.02
# DVD outputs a specified contiguous section of a file
# - game will stall while file is loaded, and continue after finishing
# --- args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)
# r5 = file read offset (0 is start)
# r6 = bytes to load
# - offset and bytes are unsigned, and will cap at file boundaries

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3  = entrynum
# r4  = output location
# r5  = read offset
# r6  = read size (-1 if unable to load file)
# r7  =   -1  -- (sync callback is always blank on synchronous loads)
# r8  =   -1  -- (archive object are not created for non-archive loads)
# r9  = HSD Cache ID (if applicable)
# r10 = path string
# r11 = 0
li r7, -1
li r8, -1
b <DVD.__read_handler>



<DVD.read_part_async> NTSC 1.02
# DVD outputs a specified contiguous section of a file over time
# - game will return immediately while file loads
# - you may provide a callback to run once the file has finished loading
# --- args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)
# r5 = file read offset (0 is start)
# r6 = bytes to load  -- (offset and bytes are unsigned, and will cap at file boundaries)
# r7 = sync callback
# r8 = sync callback arg (optional -- passed to sync callback)

# --- sync callback argument interface:
# r3 = unknown index from 0x4(rAsync) -- sampled from -0x5650(r13) on async creation
# r4 = Copy of arg r8 from function args
# r5 = 0
# r6 = 0 if no error from DVD

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3 = entrynum
# r4 = output location
# r5 = read offset
# r6 = read size (-1 if unable to load file)
# r7 = sync callback
# r8  =   -1  -- (archive object are not created for non-archive loads)
# r9 = HSD Cache ID (if applicable)
# r10 = path string
# r11 = async file info pointer
mr r9, r8
li r8, -1
b <DVD.__read_handler>



<DVD.read_archive> NTSC 1.02
# DVD outputs a DAT or USD file, and then initializes it
# - archive object will use or generate a 0x44-byte allocation that can be used to reference symbols
# --- args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)
# r5 = archive object (-1 for none, else syntax is similar to r4)

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3  = entrynum
# r4  = output location
# r5  =   0   -- (read offset is always 0 for full loads)
# r6  = file size
# r7  =   -1  -- (sync callback is always blank on synchronous loads)
# r8  = archive object
# r9  = HSD Cache ID (if applicable)
# r10 = path string
# r11 = 0
mr r8, r5
li r5, 0
li r6, -1
li r7, -1
b <DVD.__read_handler>



# --- Hidden Layer ...

<DVD.__read_handler> NTSC 1.02
# Handles various types of read function inputs with verbose argument interface

# --- args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)
# r5 = file read offset (0 is start)
# r6 = bytes to load
# - offset and bytes are unsigned, and will cap at file boundaries
# r7 = sync callback (0 for none)
# r8 = archive object (-1 for none, else syntax is similar to r4)
# r9 = sync callback arg (optional -- passed to sync callback)

# --- sync callback args:
# r3 = unknown index from 0x4(rAsync) -- sampled from -0x5650(r13) on async creation
# r4 = Copy of arg r9 from function args
# r5 = 0
# r6 = 0 if no error from DVD

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3  = entrynum
# r4  = output location
# r5  = read offset
# r6  = read size (-1 if unable to load file)
# r7  = sync callback (if applicable)
# r8  = archive object (if applicable)
# r9  = HSD Cache ID (if applicable)
# r10 = path string
# r11 = async file info pointer (if applicable)
rOut=31;rStr=30;rNum=29;rSize=28;rBytes=27;rStart=26;rSync=25;rArch=24;rLink=23;rAsync=22;rArg=21
mflr r0
stwu sp, -0x100(sp)
stw  r0,  0x100+4(sp)
stmw r21, 0x10(sp)
mr rOut, r4
mr rStart, r5
mr rBytes, r6
mr rSync, r7
mr rArch, r8
mr rArg, r9
li rLink, 0
li rStr, 0
bl <DVD.file>
beq- cr1, _return
# cr1.eq will be true if file couldn't be found

  mr rNum, r3
  mr rStr, r4
  sub rSize, r5, rStart
  cmplw rSize, rBytes
  bge+ 0f;  mr rBytes, rSize;  0:
  addi rSize, rBytes, 0x1F
  rlwinm rSize, rSize, 0, ~0x1F
  # cap size to file size, and round up to nearest ceiling to prevent DVD errors

  mr. r3, rOut
  blt+ _load_file
  # assume rOut is an address if the sign bit is found
  # - this address is where the file read will be output to

    cmpwi r3, 6
    bge- _load_file
    # assume rOut is an ARAM address if it's too large to be a memory region ID
    # Else, we assume it is a memory region to request an allocation from:

    _alloc:
    # Output location argument supports IDs for requesting allocations from 3 types of RAM:
    #   0: dynamic
    #   3: persistent (HSD Arena for preloading common files)
    #   4: semi-persistent (HSD Arena for preloading files for pending minor scene transition)
    # --- in most cases, only 0 will be safe to use

    mr r4, rSize
    bl 0x80015bd0
    cmpwi rArch, 2
    mr rOut, r3
    blt+ 0f
      mr rLink, r3
      lwz rOut, 0x4(r3)
      # regions 2...5 use HSD Arena links as metadata on return from this function...

    0: mr rOut, r3
    # allocation request has been handled

  _load_file:
  mr. r5, rOut
  li r7, 0x23    # destination ID = 3 if ARAM (?)
  bgt- 0f
    li r7, 0x21  # destination ID = 1 if virtual RAM
  0:
  mr r9, rSync   # sync callback = argument, if not auto-syncing
  cmpwi r9, -1
  mr r3, rNum
  mr r4, rStart
  mr r6, rSize
  li r8, 1     # - appears to be a kind of index? Probably for OSHeap[0] allocator
  mr r10, rArg # user argument
  bne- 0f
    li r9, 0     # sync callback is null if auto-syncing
  0:   # default to null if -1 'sync' option is set for sync callback
  bl 0x8038f6d4
  # This function appears to be the HSD Archive func used to set up a DVD Async routine
  # - this will basically cause the DVD to start trying to output the file, but takes time
  # - meanwhile, we can still do stuff with this CPU thread asynchronously

  mr. r3, rArch
  blt+ _sync
  # if rArch is negative, it's either a -1 or an address, so we don't need to allocate
  # - we otherwise assume it's an ID describing a type of alloc; 0, 3, or 4

    _archive_alloc:
    li r4, 0x44  # archive objects are 0x44 bytes in size, creating 0x60-byte allocations
    bl 0x80015bd0
    cmpwi rArch, 2
    mr rArch, r3
    blt+ 0f
      lwz rArch, 0x4(r3)
      # regions 2...5 use HSD Arena links as metadata on return from this function...

    0:

    # If an ID was given, and an error wasn't invoked, then rArch now has a valid allocation
    # - if a bad ID was given, or no space remains in the corresponding section; then game freezes

  _sync:
  cmpwi rSync, -1
  bne+ 0f
    bl <DVD.sync>
    # if sync callback was -1, then stall CPU until file is loaded
    # - this is used by any non '_async' versions of <DVD.read*>

    cmpwi rArch, -1
    beq _return
    # We also use this condition to protect the archive initializer
    # - in here, it can't accidentally be initialized before the file has loaded its contents

      _archive_initialize:
      mr r3, rArch
      mr r4, rOut
      mr r5, rBytes
      bl <archive.init>
      # archive object is ready to be searched for symbol-keyed data sections

  0:
  mr r3, rNum
  bl <DVD.async_info>
  mr rAsync, r3
  # Return information about

_return:
mr. r3, rNum     # -1 if file is not found
mr r4, rOut
crmove 6, 0      # cr1.eq = Warning: 'File Not Found'
mr r5, rStart
cmpwi rAsync, 0
mr r6, rBytes
crnot 4, 2       # cr1.lt = Warning: 'File Still Loading'
mr r7, rSync
mr r8, rArch
mr r9, rLink
mr r10, rStr
mr r11, rAsync   # not 0 if file is still loading
lmw  r21, 0x10(sp)
lwz  r0,  0x100+4(sp)
addi sp, sp, 0x100
mtlr r0
blr



<DVD.async_info> NTSC 1.02
# Returns pointer to a specific element in the async queue, or null if query isn't found
# If Query is -1, then the start of the queue is returned

# --- args:
# r3 = file, async info, sync callback, or output destination
#    Arg is used to identify one of the async file read info structs in the async queue
#    - if query has a sign bit, it checks the mentioned pointers in each element for a match
#    - otherwise, it will check for a matching entrynumber instead
#      - in cases where a pointer check fails, it is checked for a path string with <DVD.file>
#        - if the path string produces an entrynum, then a second pass is made with the entrynum
#    - if no match is made, then a null is returned and cr1.gt is false

# --- returns:
# cr1.lt = 'not synced'
# cr1.gt = 'match found'
# cr1.eq = 'synced'
# r3 = async info (null if no match)
# r4 = entrynum   (-1 if no match)

# --- Async Info structure:  - pointed to by returned r3
#    0x00 : POINT : to next info struct in async queue
#    - you may reach every queued read by following these linked pointers
#    0x04 : WORD  : unknown index -- gets passed to sync callback as r3 arg
#    0x08 : WORD  : File Entry Number -- can be input into <DVD.file> for info about the file
#    0x0C : WORD  : File Read Start -- offset of file to begin DVD read at
#    0x10 : POINT : to output destination
#    0x14 : WORD  : File Read Size
#    0x18 : HWORD : flags:
#                 + 0038 = 3-bit, unknown ID:
#                   0020 :  4 unknown (hardcoded by HSD wrapper -- maybe a hardware ID?)
#                 + 0007 = 3-bit, 'Destination' ID:
#                   0001 :  1 Virtual RAM (24MB)
#                   0003 :  3 Auxiliary RAM (16MB)
#    0x1A : HWORD : Error code (?) -- gets passed to sync callback as arg r6
#    0x1C : POINT : to sync callback (or null, if not used)
#    0x20 : WORD  : sync callback argument (or null, if not used) -- passed as arg r4

rCR=31; rQ=30; rInfo=29; # saved regs
lt=0; gt=1; eq=2; bInfo=eq+0; bDest=eq+8; bCallback=eq+12 # working bools
bNotSynced=lt+4; bSynced=eq+4; bMatch=gt+4  # returned bools

mflr r0
stwu sp, -0x20(sp)
stw  r0,  0x20+4(sp)
stmw r29, 0x10(sp)
mfcr rCR
cmpwi r3, -1
bne+ _begin
  lwz r3, -0x3ea8(r13)
  cmpwi cr1, r3, 0
  b _return # immediately return with start of queue if -1 arg was given
  # - else, begin checking for specific async_info element based on r3 as a query

_begin:
mr. rQ, r3
lwz rInfo, -0x3ea8(r13)
cmpwi cr1, rInfo, 0
crxor bMatch, bMatch, bMatch
bge- cr1, _return
# return immediately if queue is empty

bgt- _check_entrynum_start
# if positive, check only for entrynumbers

  cmpwi rQ, -1
  beq- _return
  b 0f
  # if Query is a null entrynum (-1), then return without a match
  # - this only occurs if _try_file has failed

  _check_pointers:
    cmpw rInfo, rQ
    lwz r0, 0x10(rInfo)
    lwz r3, 0x1C(rInfo)
    cmpw cr2, r0, rQ
    cmpw cr3, r3, rQ
    cror bMatch, bInfo, bDest
    cror bMatch, bMatch, bCallback
    bt-  bMatch, _return
    # If any pointers match, then return this element

      lwz rInfo, 0(rInfo)
      0:
      cmpwi cr1, rInfo, 0
      blt+ _check_pointers
      # continue checking pointers until a match or a null is found

    _try_file:
    mr r3, rQ
    bl <DVD.file>
    b _begin
    # if a pointer couldn't be found, then feed it into <DVD.file> to try with a possible entrynum

  0: lwz rInfo, 0(rInfo)
  cmpwi cr1, rInfo, 0
  bge- _return

    # check for entrynum starts in the middle of this tiny loop
    _check_entrynum_start:
    lwz r0, 0x8(rInfo)
    cmpw rQ, r0
    bne+ 0b # if a match is found, we continue on to return
    # - else, we branch back to iterate loop

  crmove bMatch, eq
  # last cr1 update, for entrynum routine

_return:
mr. r3, rInfo
li r4, -1
mr r5, rQ
beq- 0f
  lwz r4, 0x8(rInfo)
0: # if a match is returned, then also return the entrynum
mtcrf 0xBF, rCR
# We return the carefully managed cr1 bools, to summarize:
#   bNotSynced=lt+4; bSynced=eq+4; bMatch=gt+4

lmw  r29, 0x10(sp)
lwz  r0,  0x20+4(sp)
addi sp, sp, 0x20
mtlr r0
blr



<DVD.sync> NTSC 1.02
# Causes the CPU to stall untill all pending file reads are finished syncing from DVD -> RAM
# - no args/returns
li r3, -1
b <DVD.sync_to>



<DVD.sync_to> NTSC 1.02
# Causes the CPU to stall until a specified file read has finished syncing from DVD->RAM
#  CPU will not stall if no file reads are recognized by arg input
#  CPU stall for ALL pending file reads if arg '-1' is given

# --- args:
# r3 = file, async info, sync callback, or output destination
# - checks each element in async_info queue for matching addresses
# - if one isn't found, input is fed into <DVD.file>, and the entrynums are checked against result
# - if entrynum isn't found in second pass, then no sync is made
lt=0; gt=1; eq=2;
bNotSynced=lt+4; bSynced=eq+4; bMatch=gt+4
mflr r0
stwu sp, -0x20(sp)
stw  r0,  0x20+4(sp)
stw  r3, 0x10(sp)

_sync:
  lwz r3, 0x10(sp)
  bl <DVD.async_info>
  bt- bSynced, _return
  # loop will break if query doesn't match any inputs

    bl 0x800195d0
    b _sync  # While waiting, get some low-priority stuff done:

_return:
lwz  r0,  0x20+4(sp)
addi sp, sp, 0x20
mtlr r0
blr



<archive.init> NTSC 1.02
# Initialize a newly loaded archive file (DAT or USD file)
# - init will skip already-initialized files to prevent corruption of pointers in data sections
# - if a memory region ID is given instead of an allocation address, an allocation will be generated

# --- args:
# r3 = allocation for writing Archive Object information
# r4 = File start -- to be initialized
# r5 = exact file size
b 0x80016a54



<archive.symbol> NTSC 1.02
# Look up a symbol string in a given Archive Object to return the part of the file it represents

# --- args:
# r3 = archive object
# r4 = search query (address of string)

# --- returns:
# r3 = address of file section (or 0 if symbol not found)
b 0x80380358
