-==-

DVD Functions
DVD.file
 args: rFile  # rFile == rNum, rPath, or rOffset
  <-- rNum, rPath, rBytes, rAlign, rOffset, rFST, rFile
  <-- cr1.eq: bInvalid
  # rAlign is the rBytes padded to ceiling 0x20 bytes

  rFST  # File System Table element struct...
  0x0 = Point to symbol string (path name)
  0x4 = DVD Offset of file start
  0x8 = Size of file on disk

DVD.async_info  # returned rAsync struct is 0x24 bytes
 args: rQuery  # rQuery accepts many input types -- see comments
  <-- rAsync, rNum, rQuery
  <-- cr1.lt: bNotSynced,  cr1.gt: bMatch,  cr1.eq: bSynced

  rAsync  # Async DVD read queue info struct...
  0x00 = to next info struct in async queue
  0x04 = unknown index
  0x08 = File Entry Number -- can be input into <DVD.file>
  0x0C = File Read Start -- offset of file to begin DVD read at
  0x10 = to output destination
  0x14 = File Read Size
  0x18 = flags:
         0038 : 3-bit, unknown ID:
         0020 :  4 unknown (hardcoded by HSD wrapper)
         0007 : 3-bit, 'Destination' ID
         0001 :  1 Virtual RAM (24MB)
         0003 :  3 Auxiliary RAM (16MB)
  0x1A = Error code (?) -- gets passed to sync callback as arg r6
  0x1C = to sync callback (or null, if not used)
  0x20 = sync callback argument -- passed as arg r4


DVD.read
 args: rFile, rOut  # rOut = address to output or an alloc region ID
  <-- rNum, rOut, (null), rBytes, (null), (null), rMeta, rPath, (null)
  <-- cr1.eq: bInvalid

DVD.read_async  # rCallback = function executed when load finishes
 args: rFile, rOut, rSyncCB, rSyncArg
  <-- rNum, rOut, (null), rBytes, rSyncCB, (null), rMeta, rPath, rAsync
  <-- cr1.eq: bInvalid,  cr1.lt: bNotSynced

DVD.read_part  # rBytes = size of partial load
 args: rFile, rOut, rStart, rBytes
  <-- rNum, rOut, rStart, rBytes, (null), (null), rMeta, rPath, (null)
  <-- cr1.eq: bInvalid

DVD.read_part_async  # rAsync = read-only async load info struct
 args: rFile, rOut, rStart, rBytes, rSyncCB, rSyncArg
  <-- rNum, rOut, rStart, rBytes, rSyncCB (null), rMeta, rPath, rAsync
  <-- cr1.eq: bInvalid,  cr1.lt: bNotSynced

DVD.read_archive  # rArch = alloc (or region ID) for output archive obj
 args: rFile, rOut, rArch
  <-- rNum, rOut, (null), rBytes, (null), rArch, rMeta, rPath, (null)
  <-- cr1.eq: bInvalid

DVD.sync  # CPU waits for DVD to catch up entirely before continuing
 --

DVD.sync_to  # CPU waits for a specific DVD read before coninuing
 args: rQuery
  --

archive.init  # relocate and initialize an archive file (*.dat)
 args: rArch, rFileStart, rSize
  --

archive.symbol
 args: rArchive, rSymbol
  <-- rAddr
[Punkline]

<DVD.file> NTSC 1.02
# Returns a file entrynum, a path string, a file size, and a dvd offset
# --- args:
# r3 = file
#  - this can be...
#    a file entrynumber -- nearly instant lookup
#    a file offset, for DVD -- slow lookup
#    a file path string pointer -- slowest lookup
#      - recommended -- using a string is the safest choice, and can return entrynums for later use
#        - entrynums and file offsets may otherwise vary based on disk configuration


# --- returns:
# cr1.eq = True if path was invalid
# r3 = file entrynum -- or -1 if invalid
# r4 = file path pointer (static FST -- do not edit, read-only)
# r5 = file size
# r6 = file size (aligned)
# r7 = DVD offset
# r8 = FST entry
# r9 = (given path input argument)

.include "melee"
melee DVD
punkpc ppc
# load all powerpc utilities from punkpc...

prolog rInput, ctr
# function prolog backs up ctr and a saved register for the input argument ...

regs (r3), rArg
regs (r3), rNum, rPath, rSize, rAlign, rDVD, rFST, rGiven
# argument/return register names...

bInvalid = cr1.eq
# return bit index name, for cr1 return bool

mr. rInput, rArg
# save argument in rInput, and compare it to 0 ...


_try_input:
regs (r4), rLo, rHi, rStr, rX
# working register aliases ...

lwz rStr, r13.xFSTPaths(r13)     # Path string pointer array ...
lwz rFST, r13.xFSTEntries(r13)   # FST struct array base ...
lwz rX, r13.xFSTCount(r13)       # Number of entries in FST array ...
mtctr rX
# prepare loop count using ctr loaded from rX value...


# We compared the input arg to 0 so that we can use its sign to handle different input types ...

bge+ _path_is_positive
# positive numbers are IDs or offsets, negatives might be addresses
# - all uses of this function return an entrynum ID or an error code -- so this is checked for first

  lis r0, 0x8180
  cmplw rInput, r0
  bge- _path_is_invalid
    # non-address negative numbers are invalid, so catch them here while checking sign

    _path_is_pointer:
    # if input is a valid address, then pass it to DVD PathToEntrynum ...

    bl 0x8033696C
    # an entrynum or an error code has been returned in r3 ...

    cmpwi rNum, 0
    bge+ _try_input
    # ... if not negative, then retry using the returned entrynum ID
    # (we branch back so that we can recover our lost setup, after the call)
    # - else, handle as invalid ...

  _path_is_invalid:
  crset bInvalid
  li rNum, -1
  li rStr, 0
  li rSize, -1
  li rAlign, -1
  b _return # if no path could be returned, return nulls and error codes
  # - cr1.eq will be true on return, and can be branched from immediately to handle the error

_path_is_positive:
# When we have a positive number, we may be able to generate an output by navigate the FST

cmpw rInput, rX
ble+ _have_entrynum
# If input is <= the total FST range, then it's considered an entrynum ID
# - entrynum index range will allways be insignificantly small compared to the DVD byte range

  _find_DVD_offset:
  # Overflowing the entrynum index will cause the parser to check file offsets, instead ...

  li rNum, -1
  addi rX, rFST, FST.xOffset - 0xC
  # prepare for iterative lwzu loop to search for file associated with this file offset...

  _for_each_DVD_offset:
    lwzu rLo, 0xC(rX)  # this iterating offset is aligned to 'xDVD'
    cmpw rInput, rLo
    lwz r0, FST.xSize - FST.xOffset(rX)
    add rHi, rLo, r0
    cmpw cr1, rInput, rHi
    crnor eq, lt, cr1.gt
    # See if offset lands within range of high and low bytes for each file in FST ...

    addi rNum, rNum, 1
    bdnzf+ eq, _for_each_DVD_offset
    # if condition is true, or out of iterations, then break loop

_have_entrynum:
crclr cr1.eq
mulli r0, rNum, 0xC
add rFST, rFST, r0
lwz rSize, FST.xSize(rFST)
lwz rPath, FST.xStr(rFST)
lwz rDVD, FST.xOffset(rFST)
addi r0, rSize, 0x1F
add rPath, rPath, rStr
rlwinm rAlign, r0, 0, ~0x1F
mr rGiven, rInput

_return:
epilog
blr

# ---




<DVD.read> NTSC 1.02
# DVD outputs a whole file at target location in RAM
# - game will stall while the file is loaded, and continue after finishing

# --- args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3  = entrynum
# r4  = output location
# r5  =   0   -- (read offset is always 0 for full loads)
# r6  = read size
# r7  =   -1  -- (sync callback is always blank on synchronous loads)
# r8  =   -1  -- (archive object are not created for non-archive loads)
# r9  = Allocation Metadata
# r10 = path string ()
# r11 =   0   -- (async info object is not available for synchronous reads)
li r5, 0
li r6, -1
li r7, -1
li r8, -1
b <DVD.__read_handler>



<DVD.read_async> NTSC 1.02
# DVD outputs a whole file at target location in RAM over time
# - game will return immediately while file loads
# - you may provide a callback to run once the file has finished loading

# --- function args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)
# r5 = sync callback (called once DVD has finished ready asynchronously)
# r6 = sync callback arg (optional -- passed to sync callback)

# --- sync callback args:
# r3 = unknown index from 0x4(rAsync) -- sampled from -0x5650(r13) on async creation
# r4 = Copy of arg r6 from function args
# r5 = 0
# r6 = 0 if no error from DVD
# - do not attempt to sync DVD while in the middle of sync callback!

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3  = entrynum
# r4  = output location
# r5  =   0   -- (read offset is always 0 for full loads)
# r6  = file size
# r7  = sync callback
# r8  =   -1  -- (archive object are not created for non-archive loads)
# r9  = Allocation Metadata
# r10 = path string
# r11 = async file info pointer
mr r7, r5
mr r9, r6
li r6, -1
li r5, 0
li r8, -1
b <DVD.__read_handler>



<DVD.read_part> NTSC 1.02
# DVD outputs a specified contiguous section of a file
# - game will stall while file is loaded, and continue after finishing
# --- args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)
# r5 = file read offset (0 is start)
# r6 = bytes to load
# - offset and bytes are unsigned, and will cap at file boundaries

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3  = entrynum
# r4  = output location
# r5  = read offset
# r6  = read size (-1 if unable to load file)
# r7  =   -1  -- (sync callback is always blank on synchronous loads)
# r8  =   -1  -- (archive object are not created for non-archive loads)
# r9  = Allocation Metadata
# r10 = path string
# r11 = 0
li r7, -1
li r8, -1
b <DVD.__read_handler>



<DVD.read_part_async> NTSC 1.02
# DVD outputs a specified contiguous section of a file over time
# - game will return immediately while file loads
# - you may provide a callback to run once the file has finished loading
# --- args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)
# r5 = file read offset (0 is start)
# r6 = bytes to load  -- (offset and bytes are unsigned, and will cap at file boundaries)
# r7 = sync callback
# r8 = sync callback arg (optional -- passed to sync callback)

# --- sync callback recieves the following args:
# r3 = unknown index from 0x4(rAsync) -- sampled from -0x5650(r13) on async creation
# r4 = Copy of arg r8 from function args
# r5 = 0
# r6 = 0 if no error from DVD

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3 = entrynum
# r4 = output location
# r5 = read offset
# r6 = read size (-1 if unable to load file)
# r7 = sync callback
# r8  =   -1  -- (archive object are not created for non-archive loads)
# r9  = Allocation Metadata
# r10 = path string
# r11 = async file info pointer
mr r9, r8
li r8, -1
b <DVD.__read_handler>



<DVD.read_archive> NTSC 1.02
# DVD outputs a DAT or USD file, and then initializes it
# - archive object will use or generate a 0x44-byte allocation that can be used to reference symbols
# --- args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)
# r5 = archive object (-1 for none, else syntax is similar to r4)

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3  = entrynum
# r4  = output location
# r5  =   0   -- (read offset is always 0 for full loads)
# r6  = file size
# r7  =   -1  -- (sync callback is always blank on synchronous loads)
# r8  = archive object
# r9  = Allocation Metadata
# r10 = path string
# r11 = 0
mr r8, r5
li r5, 0
li r6, -1
li r7, -1
b <DVD.__read_handler>

# ---




<DVD.async_info> NTSC 1.02
# Returns pointer to a specific element in DVD async event queue, or null if query isn't found
# - async elements are structures that are dynamically linked together when queued
# - as a special case, if Query is -1, then the first element of the queue is returned

# --- args:
# r3 = file, async info, sync callback, or output destination
#    Arg is used to identify one of the async file read info structs in the async queue
#    - if query has a sign bit, it checks the mentioned pointers in each element for a match
#    - otherwise, it will check for a matching entrynumber instead
#      - in cases where a pointer check fails, it is checked for a path string with <DVD.file>
#        - if the path string produces an entrynum, then a second pass is made with the entrynum
#    - if no match is made, then a null is returned and cr1.gt is false

# --- returns:
# cr1.lt = 'not synced'
# cr1.gt = 'match found'
# cr1.eq = 'synced'
# r3 = async info (null if no match)
# r4 = entrynum   (-1 if no match)
# r5 = (given query)

# --- Async Info structure:  - pointed to by returned r3
#    0x00 : POINT : to next info struct in async queue
#    - you may reach every queued read by following these linked pointers
#    0x04 : WORD  : unknown index -- gets passed to sync callback as r3 arg
#    0x08 : WORD  : File Entry Number -- can be input into <DVD.file> for info about the file
#    0x0C : WORD  : File Read Start -- offset of file to begin DVD read at
#    0x10 : POINT : to output destination
#    0x14 : WORD  : File Read Size
#    0x18 : HWORD : flags:
#                 + 0038 = 3-bit, unknown ID:
#                   0020 :  4 unknown (hardcoded by HSD wrapper -- maybe a hardware ID?)
#                 + 0007 = 3-bit, 'Destination' ID:
#                   0001 :  1 Virtual RAM (24MB)
#                   0003 :  3 Auxiliary RAM (16MB)
#    0x1A : HWORD : Error code (?) -- gets passed to sync callback as arg r6
#    0x1C : POINT : to sync callback (or null, if not used)
#    0x20 : WORD  : sync callback argument (or null, if not used) -- passed as arg r4

.include "melee"
melee DVD
punkpc ppc

prolog rQuery, rAsync, cr
# start of function...

regs (r3), rArg
regs (r3), rRet, rNum, rGiven
# argument/return registers

enum (eq), +8, bInfo,  +4, bDest, bCallback  # working bools
enum (cr1.lt), bNotSynced, bMatch, bSynced   # returned bools

cmpwi rArg, -1
bne+ _begin
# we check for '-1' as a special input case

  lwz rRet, r13.xDVDAsyncQueue(r13)
  cmpwi cr1, rRet, 0  # this will record true or false in bSynced ...
  b _return
  # '-1' will return immediately with the front of the queue, and a check to see if it's null
  # - bSynced will be true if no async event is present in queue (DVD load is synced with CPU)

_begin:
mr. rQuery, rArg
lwz rAsync, r13.xDVDAsyncQueue(r13)
# otherwise, check to see if queue is empty

cmpwi cr1, rAsync, 0
crclr bMatch
bge- cr1, _return
# start off with a cleared bMatch bool, and check for an initial null
# - if this pointer is null, it just means no DVD read events are currently queued

  bgt- _check_entrynum_start
  # if positive, check only for entrynumbers

    cmpwi rQuery, -1
    beq- _return
    b _check_if_null  # if Query is a null entrynum (-1), then return without a match

      _check_pointers:
      cmpw rAsync, rQuery
      lwz r0, DVD.async.xDest(rAsync)
      lwz r3, DVD.async.xSyncCB(rAsync)
      cmpw cr2, r0, rQuery
      cmpw cr3, r3, rQuery
      # cr0, cr2, and cr3 have temporary comparisons for the query to possibly match

      cror bMatch, bInfo, bDest
      cror bMatch, bMatch, bCallback
      bt- bMatch, _return
      # If rAsync, Load Destination, or Callback match rQuery, then element is returned ...

        lwz rAsync, DVD.async.xNext(rAsync)
        # ... else, load the next struct and try that one

    _check_if_null:
    cmpwi cr1, rAsync, 0
    blt+ cr1, _check_pointers
    # continue to check this element only if the link pointer isn't null

      _try_file:
      mr r3, rQuery
      bl <DVD.file>
      b _begin
      # if a pointer couldn't be found for a match, then we try putting the query through .file
      # - this should return an entrynum or an error code in r3, so we send thread back to _begin:

    _check_next_num:
    lwz rAsync, DVD.async.xNext(rAsync)
    cmpwi cr1, rAsync, 0
    bge- cr1, _return  # return if out of entrynums to check for

  _check_entrynum_start:
  lwz r0, DVD.async.xNum(rAsync)
  cmpw r0, rQuery
  crmove bMatch, eq
  bt- bMatch, _return
    lwz rAsync, DVD.async.xNext(rAsync)
    cmpwi cr1, rAsync, 0
    blt+ cr1, _check_entrynum_start
    # check each element for a matching entrynum

_return:
mr. rRet, rAsync
li rNum, -1
mr rGiven, rQuery
# load return values ...

beq- 0f; lwz r4, DVD.async.xNum(rAsync); 0:
# if valid, then load rNum from struct instead of default error -1 ...

epilog
blr




<DVD.sync_to> NTSC 1.02
# Causes the CPU to stall until a specified file read has finished syncing from DVD->RAM
#  CPU will not stall if no file reads are recognized by arg input
#  CPU stall for ALL pending file reads if arg '-1' is given

# --- args:
# r3 = file, async info, sync callback, or output destination
# - checks each element in async_info queue for matching addresses
# - if one isn't found, input is fed into <DVD.file>, and the entrynums are checked against result
# - if entrynum isn't found in second pass, then no sync is made

.include "punkpc.s"
punkpc ppc
prolog xQuery
stw r3, sp.xQuery(sp)

_sync_loop:
  lwz r3, sp.xQuery(r3)
  bl <DVD.async_info>
  # Check for this async event ...

  enum (cr1.lt), bNotSynced, bMatch, bSynced   # returned boolslwz r3, 0x10
  bt- bSynced, _return
  # break loop if sync has been detected

    bl 0x800195d0
    # I think this call makes a status check of some kind in the DVD load
    # - it might be responsible for displaying disk read errors

    b _sync
    # continue loop until DVD reports it is finished syncing query ...

_return:
epilog
blr




<DVD.sync> NTSC 1.02
# Causes the CPU to stall untill all pending file reads are finished syncing from DVD -> RAM
# - no args/returns
li r3, -1
b <DVD.sync_to>


# ---




<archive.init> NTSC 1.02
# Initialize a newly loaded archive file (DAT or USD file)
# - init will skip already-initialized files to prevent corruption of pointers in data sections
# - if a memory region ID is given instead of an allocation address, an allocation will be generated

# --- args:
# r3 = allocation for writing Archive Object information
# r4 = File start -- to be initialized
# r5 = exact file size
b 0x80016a54



<archive.symbol> NTSC 1.02
# Look up a symbol string in a given Archive Object to return the part of the file it represents

# --- args:
# r3 = archive object
# r4 = search query (address of string)

# --- returns:
# r3 = address of file section (or 0 if symbol not found)
b 0x80380358




# --- Hidden Layer ...




<DVD.__read_handler> NTSC 1.02
# Handles various types of read function inputs with verbose argument interface
# - this is a low level function with a complex, but versatile interface
# - the other DVD.read* funcs are made by wrapping around this function

# --- args:
# r3 = file (entrynum, path string pointer, or dvd offset)
# r4 = output location (addr=target, 0=dynamic, 3=persistent, 4=semi-persistent)
# r5 = file read offset (0 is start)
# r6 = bytes to load
# - offset and bytes are unsigned, and will cap at file boundaries
# r7 = sync callback (0 for none)
# r8 = archive object (-1 for none, else syntax is similar to r4)
# r9 = sync callback arg (optional -- passed to sync callback)

# --- sync callback args:
# r3 = unknown index from 0x4(rAsync) -- sampled from -0x5650(r13) on async creation
# r4 = Copy of arg r9 from function args
# r5 = 0
# r6 = 0 if no error from DVD

# --- returns:
# cr1.eq = warning 'File not found'
# cr1.lt = warning 'File still loading'
# r3  = entrynum
# r4  = output location
# r5  = read offset
# r6  = read size (-1 if unable to load file)
# r7  = sync callback (if applicable)
# r8  = archive object (if applicable)
# r9  = Allocation Metadata
# r10 = path string
# r11 = async file info pointer (if applicable)

.include "melee"
punkpc ppc
melee DVD, mem
prolog rAsync, rStr, rMeta, rArch, rSyncCB, rBytes, rStart, rOut, rNum, rSize, rSyncArg, rArgs
# saved registers for r31 -= 1 ...
# - the first 8 registers are ordered to resemble part of the return interface

enum (cr1.eq), bInvalid,  (cr1.lt), bAsync, (lt), bIsAddr
# returned bools

sp.temp +8<<2, xArgs
addi rArgs, sp, sp.xArgs
# rArgs now points to a small temporary allocation added to the size of our stack frame
# - space for the first 8 registers on argument copy, and return copy


stswi r3, rArgs, 7<<2
# we only copy 7 from the input args ...


# At this point, we're ready to pass the r3 'file' arg to .file ...
bl <DVD.file>
stw r3, 0(rArgs)
# update r3 with validated query

lmw rNum, 0(rArgs)

li rMeta, 0
li rStr, 0
# rSyncArg isn't part of the return interface, so it doesn't quite fit in
# The other registers default to 0

bt- bInvalid, _return
# If file couldn't be found, return immediately
# - the cr1 bit will also be returned as true, so it may be checked at a higher level

  _have_file:
  mr rNum, r3
  mr rStr, r4
  # save returned file information in uninitialized registers

  sub rSize, r5, rStart
  cmplw rBytes, rSize
  ble+ 0f; mr rBytes, rSize; 0:
  addi rSize, rBytes, 0x1F
  rlwinm rSize, rSize, 0, ~0x1F
  # Calculate arbitrary part size, and cap it if necessary
  # - resulting size is rounded up to align to 0x20 bytes, if necessary

  mr. r3, rOut
  bt+ bIsAddr, _load_file
  # load the file if rOut is already an address (checked from sign bit)

    cmpwi r3, 5
    bge- _load_file
    # If the positive value overflows the ID index, assume it's an ARAM address instead

      _read_alloc:
      # ... otherwise, it's a memory region ID that we need to try to create an alloc from
      #  0 : dynamic -- safest choice, but always expires at scene end
      #  3 : persistent pre-load cache -- for data intended for use later on in the game
      #  4 : semi-persistent pre-load cache -- for an upcoming scene change

      mr r4, rSize
      bl 0x80015bd0
      # This high level HSD allocator has access to both dynamic and cached data regions


      cmpwi rArch, 2
      mr rOut, r3
      subi rMeta, r3, 0x20
      blt+ _load_file
        mr rMeta, r3
        # region IDs 2 ... 5 have special 'cache' metadata structures
        # - these can be linked to archive pre-loader objects to manage async loads with events


        lwz rOut, CacheMeta.xAlloc(rMeta)
        # This can be used to correct the address pointer in rOut when returning Cache regions

    _load_file:
    mr. r5, rOut
    li r7, 0x23
    bt+ bIsAddr, 0f; li r7, 0x21; 0:
    # r5 is the output destination for the DVD load to sync with
    # r7 is a bit code representing the type of RAM the DVD hardware should load data into
    # - we check the sign bit of r5 (load destination, output) to see what kind of address is used

    mr r9, rSyncCB
    # r9 is a callback to be executed once the DVD hardware has synced with SRAM, for the CPU to use
    # - if this is null, no callback is made
    # - 'sync' loads normally use this to set a flag that breaks a wait loop

    cmpwi r9, -1
    bne- 0f; li r9, 0; 0:
    # if sync callback is code '-1', then we insert a null here
    # - after the load has been set up, a loop will wait afterwards until it has 'synced'
    # - otherwise, if a null is given directly, then no callback and no sync loop is used

    mr r3, rNum   # r3 = entrynum of target file
    mr r4, rStart # r4 = starting file offset to load from
    mr r6, rSize  # r6 = number of bytes to load
    li r8, 1      # r8 = unknown index, using 1 is normal though
    mr r10, rSyncArg  # r10 is given to the sync callback, if/when executed
    # - the argument may be something useful, like a data pointer

    bl 0x8038f6d4
    # Low level backend for DVD event queue management
    # - after calling this, a DVD load will be queued for asynchronous reading
    #   - this read begins immediately if nothing else is currently queued
    #   - the CPU may continue on after the read begins, but can't reach the data until it is synced

    mr. r3, rArch
    bt+ bIsAddr, _sync
    # if the given rArch argument is an address, then skip the archive alloc step...
    # - note: this checks the sign bit, which also catches the '-1' case for not using archives

      _archive_alloc:
      # ... otherwise, we use the loading time to also allocate a space for the archive object
      # - this is done just like we did for the _read_alloc step

      li r4, 0x44
      # r3 = HSD Memory region ID to allocate from ...
      # r4 = (size of an 'Archive' object in RAM)

      bl 0x80015bd0
      cmpwi rArch, 2
      mr rArch, r3
      # rArch now holds an allocation, if successful
      # - before overwrite, the ID is checked again to see if we need to extract dest from metadata

      blt+ 0f; lwz rArch, CacheMeta.xAlloc(r3); 0:
      # rArch now holds the address of its allocation for the archive object, on generation


    _sync:
    # at this point, the DVD hardware is off doing its own thing asynchronous to the CPU...
    # - we're now deciding whether or not we should wait for it to finish before continuing...

    cmpwi rSyncCB, -1
    bne+ _get_async_info
    # If the provided rSyncCB callback is special code '-1', then we will wait for DVD...

      bl <DVD.sync>
      # Calling this will wait for the DVD to finish its last queued element (our read)
      # - on return, it will be safe to assume the data read from DVD is now accessible

      cmpwi rArch, -1
      beq- _return
      # If not using archives, then we're finished ...

        _archive_initialize:
        # ... otherwise, we need to initialize the archive object with the archive we just loaded

        mr r3, rArch
        mr r4, rOut
        mr r5, rBytes
        bl <archive.init>
        # This initializer will invoke the functions normally used to init an archive object on load

    _get_async_info:
    mr r3, rNum
    bl <DVD.async_info>
    mr rAsync, r3
    # This function will return the address of an Async Info struct, detailing the queued event

_return:
cmpwi rNum, 0
stmw rNum, 0(rArgs)
crmove bInvalid, lt
cmpwi rAsync, 0
lswi r3, rArgs, 8<<2
crnot bAsync, eq
# bInvalid and bAsync are returned in cr1

epilog
blr
